###
0000000     0000000    0000000   00000000   0000000  
000   000  000   000  000   000  000   000  000   000
0000000    000   000  000000000  0000000    000   000
000   000  000   000  000   000  000   000  000   000
0000000     0000000   000   000  000   000  0000000  
###

kxk = require 'kxk'
{ elem, kpos, randIntRange, $ } = kxk
{ alpha, opponent } = require './util'

function Board

    @: (parent, @size=19, @human) ->
        
        @div = elem 'div' class:'board'     parent:parent
        @img = elem 'img' class:'wood'      src:'../img/wood.png' parent:@div
        @shd = elem 'div' class:'shadows'   parent:@div
        @lgd = elem 'div' class:'legends'   parent:@div
        
        @div.addEventListener 'mousemove'  @onMouseMove
        @div.addEventListener 'mousedown'  @onMouseDown
        @div.addEventListener 'mouseleave' @onMouseLeave
        
        @height = 1000
        @width  = @height
        s = @height
        d = s/(@size+1)
        h = 100/(@size+2)

        @lines()
        @legend()
        
        @stn = elem 'div' class:'stones'    parent:@div
        @lib = elem 'div' class:'liberties' parent:@div
        @hlt = elem 'div' class:'highlts'   parent:@div
        @hover = elem 'div' class:"hover #{@human}" parent:@hlt
        @hover.style = "width:#{h}%; height:#{h}%; display:none; border-radius:#{h/2}px;" 

        @last = elem 'div' class:"last" parent:@hlt
        @last.style = "width:10px; height:10px; display:none; border-radius:10px;"
        
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    lines: ->
        
        s = @height
        d = s/(@size+1)
        o = d
        
        @canvas = elem 'canvas' class:'lines' height:s, width:s, parent:@div
        @ctx = @canvas.getContext '2d'
        @ctx.strokeStyle = 'black'
        @ctx.lineWidth = @size == 19 ? 2 : @size == 13 ? 2.5 : 3
        @ctx.lineCap = "round"

        @ctx.fillStyle = '#f6c67111'
        @ctx.rect 0,0,s,s
        @ctx.fill()
        
        @ctx.fillStyle = 'black'
                
        for i in 0...@size
            @ctx.beginPath()
            @ctx.moveTo o+i*d, o
            @ctx.lineTo o+i*d, s-o
            @ctx.moveTo o, o+i*d
            @ctx.lineTo s-o, o+i*d
            @ctx.stroke()   
            
        for x in -1..1
            for y in -1..1
                @ctx.beginPath()
                if @size >= 13
                    @ctx.arc s/2+x*d*(int(-@size/2) + 3), s/2+y*d*(int(-@size/2) + 3), s/180, 0, 2 * Math.PI, false
                else if x and y
                    @ctx.arc s/2+x*d*(int(-@size/2) + 2), s/2+y*d*(int(-@size/2) + 2), s/180, 0, 2 * Math.PI, false
                @ctx.fill()
                
    # 000      00000000   0000000   00000000  000   000  0000000    
    # 000      000       000        000       0000  000  000   000  
    # 000      0000000   000  0000  0000000   000 0 000  000   000  
    # 000      000       000   000  000       000  0000  000   000  
    # 0000000  00000000   0000000   00000000  000   000  0000000    
    
    legend: ->
        
        d = 100/(@size+1)
        
        for x in 0...@size
            
            n = elem 'div' class:'legend' text:alpha[x], parent:@lgd
            n.style.left = "#{d*(x+1)}%"
            n.style.top = "#{d/4}%"
            
            n = elem 'div' class:'legend' text:alpha[x], parent:@lgd
            n.style.left = "#{d*(x+1)}%"
            n.style.top = "#{100-d/4}%"

            n = elem 'div' class:'legend' text:@size-x, parent:@lgd
            n.style.left = "#{d/4}%"
            n.style.top = "#{d*(x+1)}%"
            
            n = elem 'div' class:'legend' text:@size-x, parent:@lgd
            n.style.left = "#{100-d/4}%"
            n.style.top = "#{d*(x+1)}%"
            
            @lgd.style.display = window.stash.get('legend') ? 'initial' : 'none'
            
    toggleLegend: ->
        
        window.stash.set 'legend' not window.stash.get 'legend'            
        @lgd.style.display = window.stash.get('legend') ? 'initial' : 'none'

    toggleLiberties: ->
        
        window.stash.set 'liberties' not window.stash.get 'liberties'            
        @lib.style.display = window.stash.get('liberties') ? 'initial' : 'none'
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouseLeave: (event) =>
        
        @hover.style.display = 'none'
        
    onMouseMove: (event) =>
        
        c = @posAtEvent event
        
        if c.x < 0 or c.y < 0 or c.x >= @size or c.y >= @size
            @hover.style.display = 'none'
            return

        if @game
            p = @game.pos [c.x, c.y]
            if not p in @game.all_legal()
                @hover.style.display = 'none'
                return
            
        @hover.style.display = 'initial'
        
        p = @posToPrcnt c
        
        @hover.style.left = "#{p.x}%"
        @hover.style.top  = "#{p.y}%"
        
    onMouseDown: (event) =>
        
        c = @posAtEvent event
        if @game
            p = @game.pos [c.x, c.y]
            if p in @game.all_legal()
                @hover.style.display = 'none'
                @gnu?.humanMove p
        
    # 000       0000000    0000000  000000000  
    # 000      000   000  000          000     
    # 000      000000000  0000000      000     
    # 000      000   000       000     000     
    # 0000000  000   000  0000000      000     
    
    lastMove: (color, c) ->
        
        p = @coordToPrcnt c
        
        @last.style.display = 'initial'
        @last.style.left = "#{p.x}%"
        @last.style.top  = "#{p.y}%"
        @last.classList.remove 'black'
        @last.classList.remove 'white'
        @last.classList.add opponent color
        
        @liberties()
                
    posAtEvent: (event) ->
        
        p = kpos event
        b = @div.getBoundingClientRect()
        p.sub b
        s = b.width / (@size+1)
        p.div kpos s, s
        p.add kpos -1 -1
        kpos int(Math.round(p.x)), int(Math.round(p.y))
        
    coordToPrcnt: (c) ->

        @posToPrcnt kpos c[0], c[1]

    posToPrcnt: (c) ->

        kpos 100 * (c.x+1) / (@size+1), 100 * (c.y+1) / (@size+1)
                
    #  0000000  000000000   0000000   000   000  00000000  
    # 000          000     000   000  0000  000  000       
    # 0000000      000     000   000  000 0 000  0000000   
    #      000     000     000   000  000  0000  000       
    # 0000000      000      0000000   000   000  00000000  
        
    delStone: (c) ->

        while s = $ ".pos#{c[0]}_#{c[1]}"
            s.remove()
            
    addStone: (c, color='black') ->
        
        d = 100/(@size+1)
        stn = color
        stn += randIntRange 1 15 if color == 'white'
        src = "../img/stone_#{stn}.png" 
        shadow = elem 'img' class:"shadow pos#{c[0]}_#{c[1]}" src:'../img/stone_shadow.png', width:"auto", height:"#{d+1}%" parent:@shd
        stone = elem 'img' class:"stone pos#{c[0]}_#{c[1]}" src:src, width:"auto", height:"#{d}%" parent:@stn
        x = (c[0]+0.5)*100/(@size+1)
        y = (c[1]+0.5)*100/(@size+1)

        stone.style = "left:#{x}%; top:#{y}%;" 
        shadow.style = "left:#{x}%; top:#{y}%;" 
       
    clear: ->
        
        @last.style.display = 'none'
        @shd.innerHTML = ''
        @stn.innerHTML = ''
        @lib.innerHTML = ''
        
    # 000      000  0000000    00000000  00000000   000000000  000  00000000   0000000  
    # 000      000  000   000  000       000   000     000     000  000       000       
    # 000      000  0000000    0000000   0000000       000     000  0000000   0000000   
    # 000      000  000   000  000       000   000     000     000  000            000  
    # 0000000  000  0000000    00000000  000   000     000     000  00000000  0000000   
    
    liberties: ->
        
        @lib.innerHTML = ''
        if @game
            for color in ['black' 'white']
                for s in @game.allStones color
                    c = @game.coord s
                    l = elem 'div' class:"liberty #{color}" parent:@lib, text:@game.liberties c
                    p = @coordToPrcnt c
                    l.style = "left:#{p.x}%; top:#{p.y}%;" 

module.exports = Board
