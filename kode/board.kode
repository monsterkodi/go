###
0000000     0000000    0000000   00000000   0000000  
000   000  000   000  000   000  000   000  000   000
0000000    000   000  000000000  0000000    000   000
000   000  000   000  000   000  000   000  000   000
0000000     0000000   000   000  000   000  0000000  
###

kxk = require 'kxk'
{ elem, kpos, post, randIntRange, $ } = kxk
{ stone, stoneColor, alpha, opponent } = require './util'

function Board

    @: (parent, @size=19, @human) ->
        
        @div = elem 'div' class:'board'     parent:parent
        @img = elem 'img' class:'wood'      src:'../img/wood.png' parent:@div
        # @blk = elem 'div' class:'blank'     parent:@div
        @shd = elem 'div' class:'shadows'   parent:@div
        @lgd = elem 'div' class:'legends'   parent:@div
        
        @div.addEventListener 'mousemove'  @onMouseMove
        @div.addEventListener 'mousedown'  @onMouseDown
        @div.addEventListener 'mouseleave' @onMouseLeave
        
        @height = 1000
        @width  = @height
        s = @height
        d = s/(@size+1)
        h = 90/(@size+1)

        @lines()
        @legend()
        
        @stn = elem 'div' class:'stones'    parent:@div
        @lib = elem 'div' class:'liberties' parent:@div
        @trr = elem 'div' class:'territory' parent:@div
        @hlt = elem 'div' class:'highlts'   parent:@div
        @hvr = elem 'div' class:"hover #{@human}" parent:@hlt
        @hvr.style = "width:#{h}%; height:#{h}%; display:none;" 

        @lib.style.display = window.stash.get('liberties') ? 'initial' : 'none'
        
        @lst = elem 'div' class:"last" parent:@hlt
        @lst.style = "display:none;"
     
        post.on 'resize' @onResize
        
    onResize: =>
        
        @lastMove()
        
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    lines: ->
        
        s = @height
        d = s/(@size+1)
        o = d
        
        @canvas = elem 'canvas' class:'lines' height:s, width:s, parent:@div
        @ctx = @canvas.getContext '2d'
        @ctx.strokeStyle = 'black'
        @ctx.lineWidth = @size == 19 ? 2 : @size == 13 ? 2.5 : 3
        @ctx.lineCap = "round"

        @ctx.fillStyle = '#f6c67111'
        @ctx.rect 0,0,s,s
        @ctx.fill()
        
        @ctx.fillStyle = 'black'
                
        for i in 0...@size
            @ctx.beginPath()
            @ctx.moveTo o+i*d, o
            @ctx.lineTo o+i*d, s-o
            @ctx.moveTo o, o+i*d
            @ctx.lineTo s-o, o+i*d
            @ctx.stroke()   
            
        if @size >= 9
            for x in -1..1
                for y in -1..1
                    @ctx.beginPath()
                    if @size >= 13
                        @ctx.arc s/2+x*d*(int(-@size/2) + 3), s/2+y*d*(int(-@size/2) + 3), s/180, 0, 2 * Math.PI, false
                    else if x and y
                        @ctx.arc s/2+x*d*(int(-@size/2) + 2), s/2+y*d*(int(-@size/2) + 2), s/180, 0, 2 * Math.PI, false
                    @ctx.fill()
                
    # 000      00000000   0000000   00000000  000   000  0000000    
    # 000      000       000        000       0000  000  000   000  
    # 000      0000000   000  0000  0000000   000 0 000  000   000  
    # 000      000       000   000  000       000  0000  000   000  
    # 0000000  00000000   0000000   00000000  000   000  0000000    
    
    legend: ->
        
        d = 100/(@size+1)
        
        for x in 0...@size
            
            n = elem 'div' class:'legend' text:alpha[x], parent:@lgd
            n.style.left = "#{d*(x+1)}%"
            n.style.top = "#{d/4}%"
            
            n = elem 'div' class:'legend' text:alpha[x], parent:@lgd
            n.style.left = "#{d*(x+1)}%"
            n.style.top = "#{100-d/4}%"

            n = elem 'div' class:'legend' text:@size-x, parent:@lgd
            n.style.left = "#{d/4}%"
            n.style.top = "#{d*(x+1)}%"
            
            n = elem 'div' class:'legend' text:@size-x, parent:@lgd
            n.style.left = "#{100-d/4}%"
            n.style.top = "#{d*(x+1)}%"
            
            @lgd.style.display = window.stash.get('legend') ? 'initial' : 'none'
            
    toggleLegend: ->
        
        window.stash.set 'legend' not window.stash.get 'legend'            
        @lgd.style.display = window.stash.get('legend') ? 'initial' : 'none'

    toggleLiberties: ->
        
        window.stash.set 'liberties' not window.stash.get 'liberties'            
        @lib.style.display = window.stash.get('liberties') ? 'initial' : 'none'

    toggleTerritory: ->
        
        window.stash.set 'territory' not window.stash.get 'territory'            
        @trr.style.display = window.stash.get('territory') ? 'initial' : 'none'
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouseLeave: (event) =>
        
        @hvr.style.display = 'none'
        
    onMouseMove: (event) =>
        
        c = @posAtEvent event
        
        @hvr.style.display = 'none'
        return if c.x < 0 or c.y < 0 or c.x >= @size or c.y >= @size

        if @game
            return if @game.moves.length and @game.moves[-1].startsWith @human
            return if not @game.legal @human, [c.x, c.y]
            
        @hvr.style.display = 'initial'
        
        p = @posToPrcnt c
        
        @hvr.style.left = "#{p.x}%"
        @hvr.style.top  = "#{p.y}%"
        @hvr.style.borderRadius = "#{0.5*@div.getBoundingClientRect().height/(@size+1)}px"
        
    onMouseDown: (event) =>
        
        c = @posAtEvent event
        if @game
            p = @game.pos [c.x, c.y]
            return if @game.moves.length and @game.moves[-1].startsWith @human
            if p in @game.all_legal()
                @hvr.style.display = 'none'
                @gnu?.humanMove p
        
    # 000       0000000    0000000  000000000  
    # 000      000   000  000          000     
    # 000      000000000  0000000      000     
    # 000      000   000       000     000     
    # 0000000  000   000  0000000      000     
    
    lastMove: ->
        
        return if empty @game?.moves
        [color, p] = @game.moves[-1].split ' '
        r = @coordToPrcnt @game.coord p
        d = @div.getBoundingClientRect().height/(@size+1)
        @lst.style.display = 'initial'
        # @lst.style.opacity = '0.25'
        @lst.style.left = "#{r.x}%"
        @lst.style.top  = "#{r.y}%"
        @lst.style.width = "#{0.5*d}px"
        @lst.style.height = "#{0.5*d}px"
        @lst.style.borderRadius = "#{0.5*d}px"
        @lst.style.borderWidth = "#{0.1*d}px"
        @lst.classList.remove 'black'
        @lst.classList.remove 'white'
        @lst.classList.add opponent[color]
        
    posAtEvent: (event) ->
        
        p = kpos event
        b = @div.getBoundingClientRect()
        p.sub b
        s = b.width / (@size+1)
        p.div kpos s, s
        p.add kpos -1 -1
        kpos int(Math.round(p.x)), int(Math.round(p.y))
        
    coordToPrcnt: (c) ->

        @posToPrcnt kpos c[0], c[1]

    posToPrcnt: (c) ->

        kpos 100 * (c.x+1) / (@size+1), 100 * (c.y+1) / (@size+1)
                
    #  0000000  000000000   0000000   000   000  00000000  
    # 000          000     000   000  0000  000  000       
    # 0000000      000     000   000  000 0 000  0000000   
    #      000     000     000   000  000  0000  000       
    # 0000000      000      0000000   000   000  00000000  
        
    delStone: (c) ->

        while s = $ ".pos#{c[0]}_#{c[1]}"
            s.remove()
            
    addStone: (c, s=stone.black) ->
        
        d = 100/(@size+1)
        cn = stoneColor[s]
        cn += randIntRange 1 15 if cn == 'white'
        src = "../img/stone_#{cn}.png" 
        stn = elem 'img' class:"stone pos#{c[0]}_#{c[1]}" src:src, width:"auto", height:"#{d}%" parent:@stn
        shd = elem 'img' class:"shadow pos#{c[0]}_#{c[1]}" src:'../img/stone_shadow.png', width:"auto", height:"#{1.15*d}%" parent:@shd
        x = (c[0]+0.5)*100/(@size+1)
        y = (c[1]+0.5)*100/(@size+1)

        stn.style = "left:#{x}%; top:#{y}%;" 
        shd.style = "left:#{x}%; top:#{y}%; opacity:#{o = @size == 19 ? 0.5 : @size == 13 ? 0.6 : 0.7};"
        
        @annotate()
       
    clear: ->
        
        @lst.style.display = 'none'
        @shd.innerHTML = ''
        @stn.innerHTML = ''
        @lib.innerHTML = ''
        
    ###
     0000000   000   000  000   000   0000000   000000000   0000000   000000000  00000000  
    000   000  0000  000  0000  000  000   000     000     000   000     000     000       
    000000000  000 0 000  000 0 000  000   000     000     000000000     000     0000000   
    000   000  000  0000  000  0000  000   000     000     000   000     000     000       
    000   000  000   000  000   000   0000000      000     000   000     000     00000000  
    ###
    
    annotate: ->
        
        @liberties()
        @territory()
    
    # 000      000  0000000    00000000  00000000   000000000  000  00000000   0000000  
    # 000      000  000   000  000       000   000     000     000  000       000       
    # 000      000  0000000    0000000   0000000       000     000  0000000   0000000   
    # 000      000  000   000  000       000   000     000     000  000            000  
    # 0000000  000  0000000    00000000  000   000     000     000  00000000  0000000   
    
    liberties: ->
        
        @lib.innerHTML = ''
        if @game
            for color in ['black' 'white']
                for s in @game.allStones color
                    c = @game.coord s
                    l = elem 'div' class:"liberty #{color}" parent:@lib, text:@game.liberties c
                    p = @coordToPrcnt c
                    l.style = "left:#{p.x}%; top:#{p.y}%;" 

    # 000000000  00000000  00000000   00000000   000  000000000   0000000   00000000   000   000  
    #    000     000       000   000  000   000  000     000     000   000  000   000   000 000   
    #    000     0000000   0000000    0000000    000     000     000   000  0000000      00000    
    #    000     000       000   000  000   000  000     000     000   000  000   000     000     
    #    000     00000000  000   000  000   000  000     000      0000000   000   000     000     
    
    territory: ->
        
        @trr.innerHTML = ''
        if @game
            if @game.moves.length > 1
                            
                for a in @game.areas
                    if a.color in 'wbWB'
                        for p in a.area
                            e = elem 'div' class:"eye #{a.color}" parent:@trr
                            r = @coordToPrcnt @game.coord p
                            s = 15/(@size+1)
                            s = s.toFixed 2
                            e.style = "left:#{r.x}%; top:#{r.y}%; width:#{s}%; height:#{s}%;" 
                    

                for g in @game.grps
                    if g.state == 'dead'
                        for p in g.group
                            e = elem 'div' class:"eye #{opponent[stoneColor[g.stone]][0]}" parent:@trr
                            r = @coordToPrcnt @game.coord p
                            s = 15/(@size+1)
                            s = s.toFixed 2
                            e.style = "left:#{r.x}%; top:#{r.y}%; width:#{s}%; height:#{s}%;" 

module.exports = Board
