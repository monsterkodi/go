###
 0000000   0000000   00     00  00000000   000
000       000   000  000   000  000   000  000
000       000   000  000000000  00000000   000
000       000   000  000 0 000  000        000
 0000000   0000000   000   000  000        000
###

{ stone, opponent }  = require './util'
{ args, childp, post } = require 'kxk'

function Compi

    @: (@game, @name, cmd, args) ->
        
        @msg = []
        
        @proc = childp.spawn cmd, args, shell:true, detached:true
        @proc.stdout.on 'data' @onData
        @proc.once 'exit' @onExit
        
    onExit: (signal) => 
      
      # @proc.stdin.destroy()
      # @proc.stdout.destroy()

      delete @proc

      log "#{@name} stopped #{signal}"

    newGame: (boardsize, @color, @handicap) ->
        
        # @send "time_settings 0 10 1"
        @send "boardsize #{boardsize}"
        @send "fixed_handicap #{handicap}" if @handicap > 1

    genmove: -> 
        log "#{@name}: genmove #{@color}"
        @send "genmove #{@color}"
        
    opponentMove: (p) ->

        @send "play #{opponent[@color]} #{p}"        
        @send 'showboard'
        
    estimateScore: ->
        
        @send 'estimate_score'
                
    undo: -> 
        if @msg[-1]?.startsWith 'genmove' then @send 'undo'
        @send 'undo'
        @send 'showboard'
        
    send: (m) -> @msg.push m; @proc.stdin.write m + '\n'
    
    onData: (chunk) =>
        
        data = String chunk
        
        log @name, 'onData msgs' @msg, "'#{data}'"
        
        if @partial 
            data = @partial + "'#{data}'"
            delete @partial
            
        answers = data.split '\n\n'
        
        @partial = answers.pop()

        log @name, answers

        for answer in answers
            
            if answer[0] == '='
                @ok @msg.shift(), answer[2..]
            else
                error @msg.shift(), answer[2..]
                            
    ok: (m, data) ->
            
        # log @name, 'ok --' m, data
        switch m.split(' ')[0]
            
            'genmove'
                if not 'undo' in @msg
                    p = data.split('\n')[0]
                    p = 'pass' if p == 'PASS'
                    post.emit 'playerMove' p, @name
                
            'fixed_handicap'
                
                if @color == 'black'
                    for p in data.split ' '
                        @game.setStone @game.coord(p), stone.black
                    @game.moves.push "black #{data}"
                    
            'estimate_score'
                
                @game.setScore data.split(' ')[0]
                
            'final_score'
                
                @game.finalScore data
                
            'showboard'
                
                log data
                
            # else log @name, 'ok -- ignore' m, "'#{data}'"

module.exports = Compi
