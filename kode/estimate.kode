###
00000000   0000000  000000000  000  00     00   0000000   000000000  00000000  
000       000          000     000  000   000  000   000     000     000       
0000000   0000000      000     000  000000000  000000000     000     0000000   
000            000     000     000  000 0 000  000   000     000     000       
00000000  0000000      000     000  000   000  000   000     000     00000000  
###

{ stone } = require './util/util'
{ min } = Math
Score = require './score'

function Estimate extends Score

    # 00000000   0000000  000000000  000  00     00   0000000   000000000  00000000  
    # 000       000          000     000  000   000  000   000     000     000       
    # 0000000   0000000      000     000  000000000  000000000     000     0000000   
    # 000            000     000     000  000 0 000  000   000     000     000       
    # 00000000  0000000      000     000  000   000  000   000     000     00000000  
    
    estimate: (@verbose) ->
        
        ● estimate
        
        score = @score()
        
        if @chains.length > 1 and @areas.length  > 1
        
            qmark = []
            for area in @areas
                if area.color == '?'
                    qmark.push area
                    
            if valid qmark and global.test
                @fancySchmanzy()
                @deadOrAlive()
                
            for area in qmark
                @estimateArea area
        
        score
        
    estimateArea: (area) ->
        
        # log @groupString area
        
        area.infl = []
        for p in area.posl
            area.infl.push @influence @coord p
        # log area

    influence: (c) ->

        sd = [[1 0] [0 1] [-1 0] [0 -1]]
        dd = [[1 1] [-1 1] [-1 1] [-1 -1]]
        iv = 0

        for d in sd
            n = [c[0]+d[0], c[1]+d[1]]
            s = @stoneAt n
            if s in [stone.black, stone.white]
                g = @groupAt @pos n
                if g.state != 'dead'
                    switch s 
                        stone.black ➜ iv -= 1
                        stone.white ➜ iv += 1

        for d in dd
            n = [c[0]+d[0], c[1]+d[1]]
            s = @stoneAt n
            if s in [stone.black, stone.white]
                g = @groupAt @pos n
                if g.state != 'dead'
                    switch s 
                        stone.black ➜ iv -= 0.5
                        stone.white ➜ iv += 0.5
        iv
                
module.exports = Estimate
