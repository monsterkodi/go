###
 0000000    0000000   00     00  00000000
000        000   000  000   000  000     
000  0000  000000000  000000000  0000000 
000   000  000   000  000 0 000  000     
 0000000   000   000  000   000  00000000
###

{ randInt } = require 'kxk'

alpha = 'ABCDEFGHJKLMNOPQRST'
stone = black:'○' white:'●' empty:' ' B:'○' W:'●'

function Game

    @: -> @boardsize 9
                
    legal: (c) ->
        
        @stoneAt(c) == stone.empty and @liberties c
        
    liberties: (c) ->
        
        l = 0
        for x in [-1, 1]
            for y in [-1, 1]
                n = [c[0]+x, c[1]+y]
                if @valid(n) and @stoneAt(n) == stone.empty
                    l++
        l
        
    valid: (c) -> c[0] >= 0 and c[0] < @size and c[1] >= 0 and c[1] < @size
        
    all_legal: (color) ->
        
        legal = []
        for y in 0...@size
            for x in 0...@size
                if @legal [x,y]
                    legal.push @pos [x,y]
        legal
        
    nextColor: ->
        
        switch @moves.length%2
            0 ➜ 'B'
              ➜ 'W'
        
    genmove: (color) ->
        
        color ?= @nextColor()
        l = @all_legal color
        if valid l
            p = l[randInt l.length]
            @play color, p
            p
        else
            'pass'
        
    play: (color, p) ->
        
        if not p 
            p = color
            color = @nextColor()
        c = @coord p
        r = @rows[c[1]]
        @rows[c[1]] = r.slice(0, c[0]) + stone[color] + r.slice(c[0]+1)
        @moves.push color + ' ' + p
        ''
            
    next: (num=1) ->
        
        for i in 0...num
            @genmove()
        @showboard()
    
    stoneAt: (c) -> @rows[c[1]][c[0]]
        
    coord: (p) -> [alpha.indexOf(p[0]), @size-int(p[1..])]
    pos:   (c) -> alpha[c[0]] + (@size-c[1])
    
    black: (p) -> @play 'B' p
    white: (p) -> @play 'W' p
        
    color: (p) ->
        
        switch @stoneAt @coord p
            '○' ➜ 'black'
            '●' ➜ 'white'
                ➜ 'empty'
        
    boardsize: (@size) -> @clear_board()

    clear_board: ->
        
        @rows = []
        for y in 0...@size
            @rows.push rpad @size, ''
        @moves = []
        ''
        
    showboard: ->

        s = ' '
        b = '  '
        b += alpha.slice(0,@size) each (v) -> s + v
        b += '\n'
        y = 0
        for i in @size..1
            b += lpad 2, i
            b += s
            for x in 0...@size
                b += @stoneAt([x,y]) + s
            b += i
            b += '\n'
            y++
            
        b += '  '
        b += alpha.slice(0,@size) each (v) -> s + v
        b += '\n'
        b

module.exports = Game
