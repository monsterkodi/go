###
 0000000   000   000  000      000  000   000  00000000
000   000  0000  000  000      000  0000  000  000     
000   000  000 0 000  000      000  000 0 000  0000000 
000   000  000  0000  000      000  000  0000  000     
 0000000   000   000  0000000  000  000   000  00000000
###

{ elem, noon, open, post, slash } = require 'kxk'
{ request } = require 'https'
{ rank, ogsMoves, iconUrl } = require './util/util'
WebSocket = require 'ws'
Board = require './board'
Game = require './game'

function Online

    @: (@parent, @referee) ->

        # ws = new WebSocket 'wss://online-go.com/socket.io/' perMessageDeflate:false
        # ws.on 'message' (msg) => log 'ws client' msg
        # ws.on 'error' (err) => error err
        
        @activeGames = []
        @postSecret()
                            
        post.on 'resize' @onResize
                
    showGames: =>
            
        @games = elem 'div' class:'games' parent:@parent 
        @games.addEventListener 'mousewheel' @onMouseWheel, true
        @getGames()
        @onResize()
        
    onMouseWheel: (event) =>
        
        event.stopPropagation()
        
    #  0000000  00000000   0000000  00000000   00000000  000000000  
    # 000       000       000       000   000  000          000     
    # 0000000   0000000   000       0000000    0000000      000     
    #      000  000       000       000   000  000          000     
    # 0000000   00000000   0000000  000   000  00000000     000     
    
    postSecret: ->
        
        secret = noon.load slash.resolve "#{__dirname}/../bin/.secret"
        body   = "client_id=#{secret.client_id}&client_secret=#{secret.client_secret}&username=#{secret.username}&password=#{secret.password}&grant_type=password"

        @post path:'/oauth2/token/' body:body, cb: (d) =>
            if d.access_token
                @token = d.access_token
                if window.stash.get 'games' true
                    @showGames()
            else
                log 'no token!'
                
    #  0000000   00000000  000000000         0000000    0000000   00     00  00000000   0000000  
    # 000        000          000           000        000   000  000   000  000       000       
    # 000  0000  0000000      000           000  0000  000000000  000000000  0000000   0000000   
    # 000   000  000          000           000   000  000   000  000 0 000  000            000  
    #  0000000   00000000     000            0000000   000   000  000   000  00000000  0000000   
    
    getGames: (page=1) =>

        # log 'games...' page
        # @get path:"/api/v1/ui/overview" cb: (d) =>
            # log 'active games (overview):' d.active_games.length
            # log 'overview' noon d
            
        @activeGames = []
        
        @get path:"/api/v1/megames/?page=#{page}&ended__isnull=true&page_size=100" cb: (d) =>
            @activeGames = @activeGames.concat d.results
            if d.next
                @getGames page+1
            else
                @renderGames()
                
    # 00000000   00000000  000   000  0000000    00000000  00000000   
    # 000   000  000       0000  000  000   000  000       000   000  
    # 0000000    0000000   000 0 000  000   000  0000000   0000000    
    # 000   000  000       000  0000  000   000  000       000   000  
    # 000   000  00000000  000   000  0000000    00000000  000   000  
    
    renderGames: ->
        
        for game in @activeGames
            g = elem 'div' class:'game' parent:@games
            if game.players.black.username != 'monsterkodi'
                ib = elem 'img'  parent:g, class:'gameIcon black' src:iconUrl game.players.black.icon, 128
                rb = elem 'span' parent:g, class:'gameRank black' text:rank game.players.black
                nb = elem 'span' parent:g, class:'gameName black' text:game.players.black.username
                ib.addEventListener 'click' ((id) -> -> open 'https://online-go.com/game/'+id) game.id
                ib.title = game.name
            if game.players.white.username != 'monsterkodi'
                iw  = elem 'img'  parent:g, class:'gameIcon white' parent:g, src:iconUrl game.players.white.icon, 128
                rw = elem 'span' parent:g, class:'gameRank white' text:rank game.players.white
                nw = elem 'span' parent:g, class:'gameName white' text:game.players.white.username
                iw.addEventListener 'click' ((id) -> -> open 'https://online-go.com/game/'+id) game.id
                iw.title = game.name

            b = elem 'div' class:'gameboard' parent:@games
            @renderGame game, b
            
    renderGame: (game, e) ->
        
        @get path:"/api/v1/games/#{game.id}" cb: (g) =>

            features = 
                coordinates: false
                liberties:   false
                numbers:     false
                hover:       false
            
            b = new Board e, g.height, features
            b.game = new Game b, g.players.black.name, g.players.white.name, g.handicap
            b.game.replay ogsMoves g.gamedata.moves, g.height
            b.div.style.height = '400px'
            b.div.style.width  = '400px'
            b.div.addEventListener 'click' ((g) => => @loadGame g) g
            
            if g.gamedata.clock.current_player == 1110858
                b.div.style.border = '2px solid black'
                # ugly hack to show 'your move' games on top:
                t = e.previousElementSibling
                e.parentElement.insertBefore e, e.parentElement.firstChild
                t.parentElement.insertBefore t, t.parentElement.firstChild
                
    # 000       0000000    0000000   0000000           0000000    0000000   00     00  00000000  
    # 000      000   000  000   000  000   000        000        000   000  000   000  000       
    # 000      000   000  000000000  000   000        000  0000  000000000  000000000  0000000   
    # 000      000   000  000   000  000   000        000   000  000   000  000 0 000  000       
    # 0000000   0000000   000   000  0000000           0000000   000   000  000   000  00000000  
    
    loadGame: (g) =>
        
        # log noon g
        
        @referee.newGame
            black:    g.gamedata.players.black.username
            white:    g.gamedata.players.white.username
            size:     g.gamedata.width
            handicap: g.gamedata.handicap
            
        # log noon g.gamedata.moves
        log noon g
        moves = ogsMoves g.gamedata.moves, g.gamedata.height
        @referee.board.game.replay moves
        # log noon moves
        for mv in moves
            @referee.tree.addMove mv.pos, mv.captures ? [], mv.color
        
    # 00000000    0000000    0000000  000000000  
    # 000   000  000   000  000          000     
    # 00000000   000   000  0000000      000     
    # 000        000   000       000     000     
    # 000         0000000   0000000      000     
    
    post: (o) ->
        
        req = request {
                host: 'online-go.com'
                path: o.path
                method: 'POST'
                headers: 'Content-Type': 'application/x-www-form-urlencoded'
            }, (response) =>
                log 'status:' response.statusCode if response.statusCode != 200
                response.setEncoding 'utf8'
                response.on 'data' (s) =>
                    d = JSON.parse s
                    o.cb(d) if o.cb is func
                      
        req.on 'error' (e) -> log 'post error' e        
        req.write o.body if o.body
        req.end()
          
    get: (o) ->
        
        req = request {
                host: 'online-go.com'
                path: o.path
                method: 'GET'
                headers: 
                    'Authorization': "Bearer #{@token}"
                    'Content-Type': 'application/x-www-form-urlencoded'
            }, (response) =>
                log 'status:' response.statusCode if response.statusCode != 200
                response.setEncoding 'utf8'
                data = ""
                response.on 'data' (chunk) => 
                    data += chunk
                response.on 'end' =>
                    d = JSON.parse data
                    o.cb(d) if o.cb is func
                      
        req.on 'error' (e) -> log 'get error' e
        req.end()
        
    # 000000000   0000000    0000000    0000000   000      00000000         0000000    0000000   00     00  00000000   0000000  
    #    000     000   000  000        000        000      000             000        000   000  000   000  000       000       
    #    000     000   000  000  0000  000  0000  000      0000000         000  0000  000000000  000000000  0000000   0000000   
    #    000     000   000  000   000  000   000  000      000             000   000  000   000  000 0 000  000            000  
    #    000      0000000    0000000    0000000   0000000  00000000         0000000   000   000  000   000  00000000  0000000   
    
    toggleGames: ->

        if @games
            @games.remove()
            delete @games
            window.stash.set 'games' false
        else
            window.stash.set 'games' true
            @showGames()
            
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: =>
        
        return if not @games
        
        br = @parent.getBoundingClientRect()

        tb = br.height / (@referee.boardsize+1) - 2
        rb = tb
        w  = max 0 (br.width - br.height)/2-tb
        
        @games.style.width  = "#{w}px"
        @games.style.top    = "#{tb}px"
        @games.style.bottom = "#{tb}px"
        @games.style.left   = "#{rb}px"

module.exports = Online
