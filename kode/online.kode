###
 0000000   000   000  000      000  000   000  00000000
000   000  0000  000  000      000  0000  000  000     
000   000  000 0 000  000      000  000 0 000  0000000 
000   000  000  0000  000      000  000  0000  000     
 0000000   000   000  0000000  000  000   000  00000000
###

{ elem, noon, open, post, slash } = require 'kxk'
{ rank, ogsMoves, ogsMove, toOGS, iconUrl } = require './util/util'
{ request } = require 'https'
{ io } = require 'socket.io-client'

Board = require './board'
Game = require './game'

function Online

    @: (@parent, @referee) ->

        @boards = {}
        @activeGames = []
        @postSecret()
                     
        post.on 'submitMove' @submitMove
        post.on 'loadGame'   @loadGame
        post.on 'resize'     @onResize
        
    submitMove: (gameId, pos) =>
        move = toOGS pos, @boards[gameId].game.size
        @socket.emit 'game/move',
            auth:       @myAuth
            player_id:  @myUserId
            game_id:    gameId
            move:       move
        
    #  0000000   0000000    0000000  000   000  00000000  000000000  
    # 000       000   000  000       000  000   000          000     
    # 0000000   000   000  000       0000000    0000000      000     
    #      000  000   000  000       000  000   000          000     
    # 0000000    0000000    0000000  000   000  00000000     000     
    
    initSocket: (config) ->

        clockDrift = 0
        latency = 0
        
        global.myUserId    = @myUserId   = config.user.id
        global.myUserName  = @myUserName = config.user.username 
        global.myAuth      = @myAuth     = config.chat_auth
        
        ping = =>
            if @socket.connected then @socket.emit 'net/ping' client:Date.now(), drift:clockDrift, latency:latency
        
        pong = (data) =>
            now = Date.now()
            latency = now - data.client
            clockDrift = now - latency / 2 - data.server

        notification = =>
            @socket.emit 'notification/connect' player_id:@myUserId, auth:@myAuth
            @socket.emit 'chat/connect'         player_id:@myUserId, auth:@myAuth, username:@myUserName, ranking:20, ui_class:''
            
        authenticate = =>
            @socket.emit 'authenticate',
                auth:             config.chat_auth
                player_id:        config.user.id
                username:         config.user.username 
                jwt:              config.user_jwt      
                client_version:   config.version
            notification()

        @socket = io 'https://online-go.com', 
            reconnection: true
            reconnectionDelay: 750
            reconnectionDelayMax: 10000
            transports: ["websocket"]
            upgrade: false
            
        @socket.on 'net/pong' pong
        @socket.on 'connect_error'       => log 'on connect_error'
        @socket.on 'disconnect' (reason) => log 'on disconnect' reason
        
        @socket.on 'connect'  ping
        @socket.on 'connect'  authenticate
        @socket.on 'connect' => @connectGames()
            
        setInterval ping, 10000
        
        @socket.onAny (msg, arg) => 
            if msg.startsWith 'game'
                @onGameData msg, arg
            else if msg not in ['active-bots' 'net/pong' 'score-estimator-enabled-state' 'automatch/entry' 'automatch/cancel']
                log 'on any' msg, noon arg
                
    #  0000000   000   000         0000000    0000000   00     00  00000000        0000000     0000000   000000000   0000000   
    # 000   000  0000  000        000        000   000  000   000  000             000   000  000   000     000     000   000  
    # 000   000  000 0 000        000  0000  000000000  000000000  0000000         000   000  000000000     000     000000000  
    # 000   000  000  0000        000   000  000   000  000 0 000  000             000   000  000   000     000     000   000  
    #  0000000   000   000         0000000   000   000  000   000  00000000        0000000    000   000     000     000   000  
    
    onGameData: (msg, arg)->
        
        if msg.endsWith '/move'

            pos = ogsMove arg.move, @boards[arg.game_id].game.size
            
            b = @boards[arg.game_id]
            b.game.play pos
            
            if b.game.players[b.game.nextColor()] == global.myUserName
                b.div.style.border = '2px solid black'
                b.div.style.borderRadius = '6px'
                e = b.parent # move 'your move' games to top
                t = e.previousElementSibling
                e.parentElement.insertBefore e, e.parentElement.firstChild
                t.parentElement.insertBefore t, t.parentElement.firstChild
                t.scrollIntoViewIfNeeded()
            else
                b.div.style.border = 'none'
                    
            log 'load game?' @referee.game.info.id, arg.game_id, @referee.game.info.id == arg.game_id
            if @referee.game.info.id == arg.game_id
                # post.emit 'loadGame' arg.game_id
                @loadGame arg.game_id
                # post.emit 'treeReset'
                # post.emit 'playerMove' pos, b.game.players[b.game.lastColor()]
        
    #  0000000   0000000   000   000  000   000  00000000   0000000  000000000         0000000    0000000   00     00  00000000   0000000  
    # 000       000   000  0000  000  0000  000  000       000          000           000        000   000  000   000  000       000       
    # 000       000   000  000 0 000  000 0 000  0000000   000          000           000  0000  000000000  000000000  0000000   0000000   
    # 000       000   000  000  0000  000  0000  000       000          000           000   000  000   000  000 0 000  000            000  
    #  0000000   0000000   000   000  000   000  00000000   0000000     000            0000000   000   000  000   000  00000000  0000000   
    
    connectGames: =>
        
        if empty @activeGames
            setTimeout @connectGames, 5000
            return
            
        # log "â–¸ connect to #{@activeGames.length} active games"
        for game in @activeGames
            @socket.emit 'game/connect',
                game_id:    game.id
                player_id:  @myUserId
                chat:       0
                        
    showGames: =>
            
        @games = elem 'div' class:'games' parent:@parent 
        @games.addEventListener 'mousewheel' @onMouseWheel, true
        @getGames()
        @onResize()
                
    #  0000000  00000000   0000000  00000000   00000000  000000000  
    # 000       000       000       000   000  000          000     
    # 0000000   0000000   000       0000000    0000000      000     
    #      000  000       000       000   000  000          000     
    # 0000000   00000000   0000000  000   000  00000000     000     
    
    postSecret: ->
        
        secret = noon.load slash.resolve "#{__dirname}/../bin/.secret"
        body   = "client_id=#{secret.client_id}&client_secret=#{secret.client_secret}&username=#{secret.username}&password=#{secret.password}&grant_type=password"

        @post path:'/oauth2/token/' body:body, cb: (d) =>
            if d.access_token
                @token = d.access_token
                if window.stash.get 'games' true
                    @showGames()
                @get path:'/api/v1/ui/config' cb: (d) =>
                    @initSocket d
            else
                log 'no token!'
                                
    #  0000000   00000000  000000000         0000000    0000000   00     00  00000000   0000000  
    # 000        000          000           000        000   000  000   000  000       000       
    # 000  0000  0000000      000           000  0000  000000000  000000000  0000000   0000000   
    # 000   000  000          000           000   000  000   000  000 0 000  000            000  
    #  0000000   00000000     000            0000000   000   000  000   000  00000000  0000000   
    
    getGames: (page=1) =>

        @activeGames = []
        
        @get path:"/api/v1/megames/?page=#{page}&ended__isnull=true&page_size=100" cb: (d) =>
            @activeGames = @activeGames.concat d.results
            if d.next
                @getGames page+1
            else
                @renderGames()
                
    # 00000000   00000000  000   000  0000000    00000000  00000000          0000000    0000000   00     00  00000000   0000000  
    # 000   000  000       0000  000  000   000  000       000   000        000        000   000  000   000  000       000       
    # 0000000    0000000   000 0 000  000   000  0000000   0000000          000  0000  000000000  000000000  0000000   0000000   
    # 000   000  000       000  0000  000   000  000       000   000        000   000  000   000  000 0 000  000            000  
    # 000   000  00000000  000   000  0000000    00000000  000   000         0000000   000   000  000   000  00000000  0000000   
    
    renderGames: ->
        
        @boards = {}
        for game in @activeGames
            if not game?
                log 'no game?' @activeGames
                continue
            g = elem 'div' class:'game' parent:@games
            if game.players.black.username != 'monsterkodi'
                ib = elem 'img'  parent:g, class:'gameIcon black' src:iconUrl game.players.black.icon, 128
                rb = elem 'span' parent:g, class:'gameRank black' text:rank game.players.black
                nb = elem 'span' parent:g, class:'gameName black' text:game.players.black.username
                ib.addEventListener 'click' ((id) -> -> open 'https://online-go.com/game/'+id) game.id
                ib.title = game.name
            if game.players.white.username != 'monsterkodi'
                iw  = elem 'img'  parent:g, class:'gameIcon white' parent:g, src:iconUrl game.players.white.icon, 128
                rw = elem 'span' parent:g, class:'gameRank white' text:rank game.players.white
                nw = elem 'span' parent:g, class:'gameName white' text:game.players.white.username
                iw.addEventListener 'click' ((id) -> -> open 'https://online-go.com/game/'+id) game.id
                iw.title = game.name

            b = elem 'div' class:'gameboard' parent:@games
            @renderGame game, b
            
        if not @referee.game.info.id and @activeGames.length
            @loadGame @activeGames[0].id
            
    # 00000000   00000000  000   000  0000000    00000000  00000000          0000000    0000000   00     00  00000000  
    # 000   000  000       0000  000  000   000  000       000   000        000        000   000  000   000  000       
    # 0000000    0000000   000 0 000  000   000  0000000   0000000          000  0000  000000000  000000000  0000000   
    # 000   000  000       000  0000  000   000  000       000   000        000   000  000   000  000 0 000  000       
    # 000   000  00000000  000   000  0000000    00000000  000   000         0000000   000   000  000   000  00000000  
    
    renderGame: (game, e) ->
                
        @get path:"/api/v1/games/#{game.id}" cb: (g) =>

            features = 
                coordinates: false
                liberties:   false
                numbers:     false
                hover:       false
                dots:        false
            
            b = new Board e, g.height, features
            b.game = new Game b, g.players.black.username, g.players.white.username, g.handicap
            b.game.paused = true
            b.game.info.id = g.id
            b.game.replay ogsMoves(g.gamedata.moves, g.height), true
            
            br = @parent.getBoundingClientRect()
            tb = br.height / (@referee.boardsize+1) - 2
            rb = tb
            w  = max 128 (br.width - br.height)/2-tb

            b.div.style.height = "#{w-30}px"
            b.div.style.width  = "#{w-30}px"
            b.div.addEventListener 'click' ((id) => => @loadGame id) g.id
            @boards[g.id] = b
            b.onResize()
            
            if g.gamedata.clock.current_player == 1110858
                b.div.style.border = '2px solid black'
                b.div.style.borderRadius = '6px'
                t = e.previousElementSibling # move 'your move' games to top
                e.parentElement.insertBefore e, e.parentElement.firstChild
                t.parentElement.insertBefore t, t.parentElement.firstChild
                
    # 000       0000000    0000000   0000000           0000000    0000000   00     00  00000000  
    # 000      000   000  000   000  000   000        000        000   000  000   000  000       
    # 000      000   000  000000000  000   000        000  0000  000000000  000000000  0000000   
    # 000      000   000  000   000  000   000        000   000  000   000  000 0 000  000       
    # 0000000   0000000   000   000  0000000           0000000   000   000  000   000  00000000  
    
    loadGame: (id) =>
        
        if b = @boards[id]
            g = b.game
            @referee.newGame
                black:    g.players.black
                white:    g.players.white
                size:     g.size
                handicap: g.handicap
                
            moves = g.moves.m
            
            @referee.game.paused = true
            @referee.game.info.id = id
            @referee.game.replay moves, true
            @referee.tree.replay moves, id
            @referee.game.estimate()
            @referee.board.annotate()
            
            for k,b of @boards
                t = b.parent.previousElementSibling
                t.style.backgroundColor = 'transparent'
                t.style.boxShadow = 'unset'
            if e = @boards[id]?.parent
                t = e.previousElementSibling
                t.style.backgroundColor = 'rgba(80,30,0,0.03)'
                t.style.boxShadow       = 'inset 1px 1px 6px rgba(80,30,0,0.6)'
                
                t.scrollIntoViewIfNeeded()
                e.scrollIntoViewIfNeeded()

        clearPending = => delete @pendingGameId
        delete @pendingGameId
        @pendingGameId = int id if id is num             
        @get path:"/api/v1/games/#{id}" cb: (g) =>
            
            if g.id != @pendingGameId and @pendingGameId
                setTimeout clearPending, 4000        
                log 'ignoring non-pending game data' @pendingGameId, g.id
                return
                
            delete @pendingGameId
            @referee.newGame
                black:    g.gamedata.players.black.username
                white:    g.gamedata.players.white.username
                size:     g.gamedata.width
                handicap: g.gamedata.handicap
                
            moves = ogsMoves g.gamedata.moves, g.gamedata.height
            @referee.game.paused = true
            @referee.game.info.id = g.id
            @referee.game.replay moves, true
            @referee.tree.replay moves, g.id
            @referee.game.estimate()
            @referee.board.annotate()
            
            @boards[id]?.div.scrollIntoViewIfNeeded()
            
    nextGame: ->

        if @referee.game.info.id
            for game,i in @activeGames
                if game.id == @referee.game.info.id
                    id = @activeGames[clamp 0, @activeGames.length-1, i+1].id
                    break

        id ?= @activeGames[0].id        
        @loadGame id
        
    prevGame: ->

        if @referee.game.info.id
            for game,i in @activeGames
                if game.id == @referee.game.info.id
                    id = @activeGames[clamp 0, @activeGames.length-1, i-1].id
                    break

        id ?= @activeGames[-1].id
        
        @loadGame id
        
    # 00000000    0000000    0000000  000000000  
    # 000   000  000   000  000          000     
    # 00000000   000   000  0000000      000     
    # 000        000   000       000     000     
    # 000         0000000   0000000      000     
    
    post: (o) ->
        
        req = request {
                host: 'online-go.com'
                path: o.path
                method: 'POST'
                headers: 'Content-Type': 'application/x-www-form-urlencoded'
            }, (response) =>
                log 'status:' response.statusCode if response.statusCode != 200
                response.setEncoding 'utf8'
                response.on 'data' (s) =>
                    d = JSON.parse s
                    o.cb(d) if o.cb is func
                      
        req.on 'error' (e) -> log 'post error' e        
        req.write o.body if o.body
        req.end()
          
    get: (o) ->
        
        req = request {
                host: 'online-go.com'
                path: o.path
                method: 'GET'
                headers: 
                    'Authorization': "Bearer #{@token}"
                    'Content-Type': 'application/x-www-form-urlencoded'
            }, (response) =>
                log 'status:' response.statusCode if response.statusCode != 200
                response.setEncoding 'utf8'
                data = ""
                response.on 'data' (chunk) => 
                    data += chunk
                response.on 'end' =>
                    d = JSON.parse data
                    o.cb(d) if o.cb is func
                      
        req.on 'error' (e) -> log 'get error' e
        req.end()
        
    # 000000000   0000000    0000000    0000000   000      00000000         0000000    0000000   00     00  00000000   0000000  
    #    000     000   000  000        000        000      000             000        000   000  000   000  000       000       
    #    000     000   000  000  0000  000  0000  000      0000000         000  0000  000000000  000000000  0000000   0000000   
    #    000     000   000  000   000  000   000  000      000             000   000  000   000  000 0 000  000            000  
    #    000      0000000    0000000    0000000   0000000  00000000         0000000   000   000  000   000  00000000  0000000   
    
    toggleGames: ->

        if @games
            @games.remove()
            delete @games
            window.stash.set 'games' false
        else
            window.stash.set 'games' true
            @showGames()
            
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: =>
        
        return if not @games
        
        br = @parent.getBoundingClientRect()
        tb = br.height / (@referee.boardsize+1) - 2
        w  = max 128 (br.width - br.height)/2-tb
        lb = (br.width - br.height)/2 - w

        if (br.width - br.height)/2 < 128
            @games.style.display = 'none'
        else
            @games.style.display = 'initial'
        
        @games.style.width  = "#{w}px"
        @games.style.top    = "#{tb}px"
        @games.style.bottom = "#{tb}px"
        @games.style.left   = "#{lb}px"
        
        for i,b of @boards
            b.div.style.width  = "#{w-30}px"
            b.div.style.height = "#{w-30}px"

    onMouseWheel: (event) => 
        # prevent tree navigation when mouse wheeling over games list
        event.stopPropagation()
            
module.exports = Online
