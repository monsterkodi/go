###
00000000   00000000  00000000  00000000  00000000   00000000  00000000  
000   000  000       000       000       000   000  000       000       
0000000    0000000   000000    0000000   0000000    0000000   0000000   
000   000  000       000       000       000   000  000       000       
000   000  00000000  000       00000000  000   000  00000000  00000000  
###

kxk = require 'kxk'
{ elem, post } = kxk
{ opponent }   = require './util/util'

SGF     = require './util/sgf'
Leelaz  = require './bot/leelaz'
Katago  = require './bot/katago'
Hara    = require './bot/hara'
GNU     = require './bot/gnu'
Board   = require './board'
Game    = require './game'

function Referee

    @: (@parent)->
        
        @boardsize = window.stash.get 'boardsize'   19
        @handicap  = window.stash.get 'handicap'    0
        @white     = window.stash.get 'white'       'human'
        @black     = window.stash.get 'black'       'human'
        
        post.on 'newGame'    @newGame
        post.on 'playerMove' @playerMove

    # 000   000  00000000  000   000         0000000    0000000   00     00  00000000  
    # 0000  000  000       000 0 000        000        000   000  000   000  000       
    # 000 0 000  0000000   000000000        000  0000  000000000  000000000  0000000   
    # 000  0000  000       000   000        000   000  000   000  000 0 000  000       
    # 000   000  00000000  00     00         0000000   000   000  000   000  00000000  
    
    newGame: (gi={}) =>

        # log noon gi
        
        @white     = gi.white    ? @white
        @black     = gi.black    ? @black
        @handicap  = gi.handicap ? @handicap
        @boardsize = gi.size     ? @boardsize
        moves      = gi.moves    ? []
        info       = gi.info     ? {}
        @redos     = []
        
        if @white == 'leelaz' or @black == 'leelaz' then @boardsize = 19
        
        # log @boardsize, @handicap, info, gi
        
        window.stash.set 'size'      @boardsize
        window.stash.set 'white'     @white
        window.stash.set 'black'     @black
        window.stash.set 'handicap'  @handicap
        window.stash.set 'moves'     moves
                
        @parent.innerHTML = ''
                
        @board = new Board @parent, @boardsize
        @game  = new Game  @board, @white, @black, @handicap
        @board.game = @game
        @game.info  = info
        
        @compi = {}
                    
        switch @black
            'gnu'       ➜ @compi.black = new GNU    @game
            'leelaz'    ➜ @compi.black = new Leelaz @game
            'hara'      ➜ @compi.black = new Hara   @game
            'katago'    ➜ @compi.black = new Katago @game
            
        switch @white
            'gnu'       ➜ @compi.white = new GNU    @game
            'leelaz'    ➜ @compi.white = new Leelaz @game
            'hara'      ➜ @compi.white = new Hara   @game
            'katago'    ➜ @compi.white = new Katago @game
                
        @compi.black?.newGame @boardsize, 'black' @handicap
        @compi.white?.newGame @boardsize, 'white' @handicap
        
        if valid moves
            @replay moves
        else
            @game.updateTitle()
                    
            if @compi.black and @handicap < 2
                @compi.black.genmove()
                
            if @compi.white and @handicap > 1
                @compi.white.genmove()
            
    # 00000000   00000000  00000000   000       0000000   000   000  
    # 000   000  000       000   000  000      000   000   000 000   
    # 0000000    0000000   00000000   000      000000000    00000    
    # 000   000  000       000        000      000   000     000     
    # 000   000  00000000  000        0000000  000   000     000     
    
    replay: (moves) ->
            
        for m in moves
            [c, p] = m.split ' '
            if not p?
                p = c
                c = ['black' 'white'][moves.indexOf(m)%2]
            @game.play c, p
            if 1
                @compi.black?.send "play #{c} #{p}"
                @compi.white?.send "play #{c} #{p}"
        
        if score = @game.info.score
            @game.finalScore score
        else
            @compi[@game.nextColor()]?.genmove()

    # 00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000       
    # 000000000  000   000   000 000   0000000   
    # 000 0 000  000   000     000     000       
    # 000   000   0000000       0      00000000  
    
    genMove: -> @game.genmove @game.nextColor()
    
    playerMove: (p, player) =>
        
        return if @game.end()
        if valid @redos 
            if player in [@compi.black?.name, @compi.white?.name]
                return
            @redos = []
        
        color = @game.nextColor()
                
        return error("wrong player: #{player}", color, @game.players) if @game.players[color] != player
        
        @game.play color, p
        
        next = opponent[color]
        @compi[next]?.opponentMove p
            
        if @game.end()
            @compi.black?.send 'final_score'
            @compi.white?.send 'final_score'
        else
            # log "#{next} genmove" @compi[next]
            @compi[next]?.genmove()
                            
    # 000   000  000   000  0000000     0000000   
    # 000   000  0000  000  000   000  000   000  
    # 000   000  000 0 000  000   000  000   000  
    # 000   000  000  0000  000   000  000   000  
    #  0000000   000   000  0000000     0000000   
    
    undo: ->
        
        log 'undo'
        return if @game.start()
        return if @game.handicap > 1 and @game.moves.num() == 1
        
        # return if valid @compi.black?.msg
        # return if valid @compi.white?.msg
        
        # log 'undo' @game.moves
        
        @paused = true
        @redos ?= []
        
        # while @game.lastPos() in ['pass' 'resign']
            # @redos.unshift @game.moves.pop()
            # @compi.black?.undo()
            # @compi.white?.undo()
            
        m = @game.moves.pop()
        @redos.unshift m
        
        @game.undoMove m
        
        # log 'undo' @game.moves, @redos
        
        @compi.black?.undo()
        @compi.white?.undo()
            
    redo: ->
        return if empty @redos
        
        move = @redos.shift()
        log 'redo' move
        @game.play move.color, move.pos
        @compi.black?.send "play #{move.color} #{move.pos}"
        @compi.white?.send "play #{move.color} #{move.pos}"
            
    #       000  000   000  00     00  00000000   
    #       000  000   000  000   000  000   000  
    #       000  000   000  000000000  00000000   
    # 000   000  000   000  000 0 000  000        
    #  0000000    0000000   000   000  000        
    
    jumpToStart: ->
        
        log 'start'
        return if @game.start()
        @redos = @game.moves.m.concat @redos
        @compi.black?.send "clear_board"
        @compi.white?.send "clear_board"
        @game.clear_board()
        
    jumpToEnd: ->

        log 'end'
        while valid @redos
            @redo()
                    
module.exports = Referee
