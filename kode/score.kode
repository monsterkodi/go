###
 0000000   0000000   0000000   00000000   00000000
000       000       000   000  000   000  000     
0000000   000       000   000  0000000    0000000 
     000  000       000   000  000   000  000     
0000000    0000000   0000000   000   000  00000000
###

{ stoneColor, stone, alpha } = require './util'
{ kstr, noon } = require 'kxk'
Grid = require './grid'

function Score

    #  0000000   0000000   0000000   00000000   00000000  
    # 000       000       000   000  000   000  000       
    # 0000000   000       000   000  0000000    0000000   
    #      000  000       000   000  000   000  000       
    # 0000000    0000000   0000000   000   000  00000000  
    
    calcScore: ->
        
        grid  = new Grid @size
        allg  = @allGroups()
        @grps  = []
        @areas = []
        for s,gl of allg
            for g in gl
                if s == stone.empty
                    @areas.push 
                        area:  g
                        key:   g.join ' '
                        grps:  []
                        color: @areaColor g
                        state: 'neutral'
                    for p in g ➜ grid.set p, @areas[-1].color
                else
                    n = @group_neighbors g
                    @grps.push
                        stone: s
                        group: g
                        areas: []
                        libs:  n.filter((p) => stone.empty == @stoneAt @coord p).length
                        neighbors: n
                        key:   g.join ' '
                        state: 'unknown'
                    for p in g ➜ grid.set p, s
             
        log grid.toString()
                
        log '%c areas' 'font-size: 20px; color:red;'
        log noon @areas
        log '%c groups' 'font-size: 20px; color:green;'
        log noon @grps 
        
        for g in @grps
            if g.libs == 1
                log 'dead' noon g
                g.state = 'dead'
                for n in g.neighbors
                    log n, @countlib(n), @stoneAt n
        
        w = kstr.cnt grid.grid, 'w'
        b = kstr.cnt grid.grid, 'b'
        log w, b
        grid
        
    #  0000000   00000000   00000000   0000000   
    # 000   000  000   000  000       000   000  
    # 000000000  0000000    0000000   000000000  
    # 000   000  000   000  000       000   000  
    # 000   000  000   000  00000000  000   000  
    
    areaColor: (g) ->
        
        cl = g.map (p) => @potentialOwner @coord p
        sl = cl.filter((r) -> r?).join ''
        if not '○●' in sl and not '●○' in sl and sl.length > 0
            c = stoneColor[sl[0]][0]
            if sl.length == g.length
                c
            else
                '.'
        else
            '.'

    #  0000000   000   000  000   000  00000000  00000000   
    # 000   000  000 0 000  0000  000  000       000   000  
    # 000   000  000000000  000 0 000  0000000   0000000    
    # 000   000  000   000  000  0000  000       000   000  
    #  0000000   00     00  000   000  00000000  000   000  
    
    potentialOwner: (c) ->
        
        if stone.empty == @stoneAt c
            rc = @rayColors c
            p = rc.filter((r) -> r?).join ''
            if not '○●' in p and not '●○' in p and p.length > 0
                # log 'pot' @pos(c), p[0]
                p[0]
        
    # 00000000    0000000   000   000  
    # 000   000  000   000   000 000   
    # 0000000    000000000    00000    
    # 000   000  000   000     000     
    # 000   000  000   000     000     
    
    rayColor: (c, d) ->
        
        n = [c[0]+d[0], c[1]+d[1]]
        s = @stoneAt n
        s == stone.empty ? @rayColor(n, d) : s

    rayColors: (c) ->

        [[1 0] [0 1] [-1 0] [0 -1]].map (r) => @rayColor c, r
            
    # 000      000  0000000    00000000  00000000   000000000  000  00000000   0000000  
    # 000      000  000   000  000       000   000     000     000  000       000       
    # 000      000  0000000    0000000   0000000       000     000  0000000   0000000   
    # 000      000  000   000  000       000   000     000     000  000            000  
    # 0000000  000  0000000    00000000  000   000     000     000  00000000  0000000   
    
    countlib: (p) -> @liberties @coord p
    liberties: (c) ->
        
        if @valid c
            s = @stoneAt c
            if s != stone.empty
                g = @group c
                n = @group_neighbors g
                n = n.filter (p) => stone.empty == @stoneAt @coord p
                return n.length
        0
        
    # 00000000  00000000   00000000  00000000  0000000     0000000   00     00   0000000  
    # 000       000   000  000       000       000   000  000   000  000   000  000       
    # 000000    0000000    0000000   0000000   000   000  000   000  000000000  0000000   
    # 000       000   000  000       000       000   000  000   000  000 0 000       000  
    # 000       000   000  00000000  00000000  0000000     0000000   000   000  0000000   
    
    free: (color, p) -> @freedoms color, @coord p
    freedoms: (color, c) ->

        l = 0
        for n in @neighbors c
            s = @stoneAt n
            if s == stone.empty then l++
            else if s == stone[color]
                if @liberties(n) > 1
                    l++
        l

    #  0000000   00000000    0000000   000   000  00000000   
    # 000        000   000  000   000  000   000  000   000  
    # 000  0000  0000000    000   000  000   000  00000000   
    # 000   000  000   000  000   000  000   000  000        
    #  0000000   000   000   0000000    0000000   000        

    allGroups: ->

        grps = '○':[] '●':[] ' ':[]
        allp = @allPos()
        while allp.length
            p = allp.pop()
            s = @stoneAt p
            g = @group @coord p
            for gp in g
                if 0 <= i = allp.indexOf gp
                    allp.splice i, 1
            grps[s].push g.sort()
        grps
    
    group: (c) ->
        
        s = @stoneAt c
        g = [@pos c]
        f = [@pos c]
        while fp = f.shift()
            for n in @neighbors @coord fp
                if s == @stoneAt n
                    p = @pos n
                    if p not in g
                        g.push p
                        if p not in f then f.push p
        g
        
    # 000   000  00000000  000   0000000   000   000  0000000     0000000   00000000    0000000  
    # 0000  000  000       000  000        000   000  000   000  000   000  000   000  000       
    # 000 0 000  0000000   000  000  0000  000000000  0000000    000   000  0000000    0000000   
    # 000  0000  000       000  000   000  000   000  000   000  000   000  000   000       000  
    # 000   000  00000000  000   0000000   000   000  0000000     0000000   000   000  0000000   
    
    group_neighbors: (g) ->
        
        gn = []
        for p in g
            for n in @poslist @neighbors @coord p
                if n not in g and n not in gn
                    gn.push n
        gn
        
    neighbors: (c) ->
        
        ns = []
        for [x,y] in [[-1 0] [1 0] [0 -1] [0 1]]
            n = [c[0]+x, c[1]+y]
            if @valid n
                ns.push n
        ns
              
    # 000      00000000   0000000    0000000   000      
    # 000      000       000        000   000  000      
    # 000      0000000   000  0000  000000000  000      
    # 000      000       000   000  000   000  000      
    # 0000000  00000000   0000000   000   000  0000000  
    
    legal: (color, c) ->
        
        fr = @freedoms color, c
        mc = @movecaptures color, c
        @stoneAt(c) == stone.empty and (fr or mc)
        
    all_legal: (color) ->
        
        color ?= @nextColor()
        l = []
        for y in 0...@size
            for x in 0...@size
                if @legal color, [x,y]
                    l.push @pos [x,y]
        l
                
    movecaptures: (color, c) ->

        m = stone[color]
        for n in @neighbors c
            s = @stoneAt n
            if s != 'empty' and s != m
                if 1 == @freedoms opponent[color], n
                    return true
        false            
        
    #  0000000   000      000      00000000    0000000    0000000  
    # 000   000  000      000      000   000  000   000  000       
    # 000000000  000      000      00000000   000   000  0000000   
    # 000   000  000      000      000        000   000       000  
    # 000   000  0000000  0000000  000         0000000   0000000   
    
    allPos: ->
        
        p = []
        for y in 0...@size
            for x in 0...@size
                p.push alpha[x]+(@size-y)
        p
       
    #  0000000  000000000   0000000   000   000  00000000   0000000
    # 000          000     000   000  0000  000  000       000     
    # 0000000      000     000   000  000 0 000  0000000   0000000 
    #      000     000     000   000  000  0000  000            000
    # 0000000      000      0000000   000   000  00000000  0000000 
    
    allStones: (color) ->
        
        s = stone[color]
        l = []
        for y in 0...@size
            for x in 0...@size
                if s == @stoneAt x,y
                    l.push @pos [x,y]
        l
        
    stoneAt: (x,y) => @grid.at x,y
    valid:   (c)   => 0 <= c[0] < @size and 0 <= c[1] < @size
    coord:   (p)   => [alpha.indexOf(p[0].toUpperCase()), @size-int(p[1..])]
    pos:     (c)   => alpha[c[0]] + (@size-c[1])
    poslist: (cl)  -> cl.map @pos
                                        
module.exports = Score
