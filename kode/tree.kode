###
000000000  00000000   00000000  00000000
   000     000   000  000       000     
   000     0000000    0000000   0000000 
   000     000   000  000       000     
   000     000   000  00000000  00000000
###

{ kstr, post } = require 'kxk'
{ max } = Math

function Tree

    @: (@parent) ->
        
        @parentCursor = copy @parent.cursor if @parent
        @moves  = []
        @cursor = mvi:-1, ali:0
                
    #  0000000   0000000    0000000    00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000   000  000   000  000   000  000       
    # 000000000  000   000  000   000  000000000  000   000   000 000   0000000   
    # 000   000  000   000  000   000  000 0 000  000   000     000     000       
    # 000   000  0000000    0000000    000   000   0000000       0      00000000  
        
    addMove: (pos, cpt=[]) ->
        
        log 'add\n'
        
        if tr = @cursorTree()
            tr.addMove pos, cpt
        else
            if @cursor.mvi == @moves.length-1
                @cursor.mvi = @moves.length
                @cursor.ali = 0
                @moves.push pos:pos, cpt:cpt, alt:[], color:@nextColor()
                post.emit? 'tree'
            else
                @cursor.mvi++
                @cursor.ali = @moves[@cursor.mvi].alt.length+1
                tr = new Tree @
                @moves[@cursor.mvi].alt.push tr
                tr.addMove pos, cpt
        
        log @toString() + '\n'
        
    nextColor: -> ['black''white'][@history().length%2]
        
    # 000   000   0000000   000   000  000   0000000    0000000   000000000  00000000  
    # 0000  000  000   000  000   000  000  000        000   000     000     000       
    # 000 0 000  000000000   000 000   000  000  0000  000000000     000     0000000   
    # 000  0000  000   000     000     000  000   000  000   000     000     000       
    # 000   000  000   000      0      000   0000000   000   000     000     00000000  
    
    navigate: (dir) ->

        log dir + '\n'
        
        switch dir
            'up'    ➜ @navigateUp()
            'down'  ➜ @navigateDown()
            'right' ➜ @navigateRight()
            'left'  ➜ @navigateLeft()
            'back'  ➜ @navigateBack()

        log @toString() + '\n'  
        
        post.emit? 'tree'
        
    navigateUp: ->
        
        if tr = @cursorTree()
            if tr.cursor.mvi > 0
                tr.navigateUp()
                if tr.cursor.mvi < 0
                    @cursor.ali = 0
                    @cursor.mvi--
        else 
            if @cursor.mvi > 0 then @cursor.mvi--
            
    navigateDown: ->
        
        if tr = @cursorTree()
            if tr.cursor.mvi < tr.moves.length-1
                tr.navigateDown()
        else if @cursor.mvi < @moves.length-1
            @cursor.mvi++

    navigateLeft: ->  
        
        if tr = @cursorTree()
            if tr.cursor.mvi > 0
                tr.navigateLeft()
            else
                if tr.cursor.mvi == 0
                    tr.cursor.mvi = -1
                @cursor.ali--
        
    navigateRight: ->
        
        if tr = @cursorTree()
            if tr.cursor.mvi > 0
                tr.navigateRight()
            else 
                mv = @moves[@cursor.mvi]
                if @cursor.ali < mv.alt.length
                    tr.cursor.mvi = -1
                    @cursor.ali++
                    tr = @cursorTree()
                    tr.cursor.mvi = 0
        else
            mv = @moves[@cursor.mvi]
            if @cursor.ali < mv.alt.length
                @cursor.ali++
                tr = @cursorTree()
                tr.cursor.mvi = 0
        
    # 0000000     0000000    0000000  000   000  
    # 000   000  000   000  000       000  000   
    # 0000000    000000000  000       0000000    
    # 000   000  000   000  000       000  000   
    # 0000000    000   000   0000000  000   000  
    
    navigateBack: ->
        
        if tr = @cursorTree()
            tr.navigateBack()
        else
            if @cursor.mvi == 0
                @parent?.navigateLeftmost()
                @parent?.navigateUp()
            else
                @navigateUp()
            
    navigateLeftmost: ->  
        
        if tr = @cursorTree()
            if tr.cursor.ali
                tr.navigateLeftmost()
            else
                tr.cursor.mvi = -1
                @cursor.ali = 0
        else
            if @parent
                @cursor.mvi = -1
                    
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    select: ->
        
        miai = [].splice.call arguments, 0
        [mvi, ali] = miai

        if ali
            if tr = @treeAt mvi, ali
                @cursor.mvi = mvi
                @cursor.ali = ali
                tr.select.apply tr, miai[2..]
            else
                log 'no tree'
        else
            @deselect()
            @cursor.mvi = mvi
            @cursor.ali = 0
            return
                
    deselect: ->
            
        if tr = @cursorTree()
            tr.deselect()
            
        @cursor.mvi = -1
        @cursor.ali = 0
            
    # 000000000  00000000   00000000  00000000         0000000   000000000  
    #    000     000   000  000       000             000   000     000     
    #    000     0000000    0000000   0000000         000000000     000     
    #    000     000   000  000       000             000   000     000     
    #    000     000   000  00000000  00000000        000   000     000     
    
    
    cursorTree: -> @moves[@cursor.mvi].alt[@cursor.ali-1] if @cursor.ali
    
    treeAt: (mvi, ali) ->
        
        if 0 <= mvi < @moves.length
            return @ if ali < 1
            mv = @moves[mvi]
            if 0 < ali <= mv.alt.length
                return mv.alt[ali-1]
        log 'no tree at' mvi, ali
        log @toString()
        
    depth: -> @moves.length
    width: -> 
        w = 1
        for m in @moves
            for t in m.alt
                w += t.width()
        w
    
    # 000   000  000   0000000  000000000   0000000   00000000   000   000  
    # 000   000  000  000          000     000   000  000   000   000 000   
    # 000000000  000  0000000      000     000   000  0000000      00000    
    # 000   000  000       000     000     000   000  000   000     000     
    # 000   000  000  0000000      000      0000000   000   000     000     
    
    history: ->
        
        if @cursor.mvi
            if tr = @cursorTree()
                h = @moves[...@cursor.mvi].map (m) -> m.pos
                h = h.concat tr.history()
            else
                h = @moves[..@cursor.mvi].map (m) -> m.pos
        else
            if @moves.length
                h = [@moves[0].pos]
            else
                h = []
        h
        
    #  0000000  000000000  00000000   000  000   000   0000000    0000000  
    # 000          000     000   000  000  0000  000  000        000       
    # 0000000      000     0000000    000  000 0 000  000  0000  0000000   
    #      000     000     000   000  000  000  0000  000   000       000  
    # 0000000      000     000   000  000  000   000   0000000   0000000   
    
    rowStrings: ->

        s = []
        a = []
        for mi in 0...@moves.length
            m = @moves[mi]
            ps = m.alt.length ? '─' : ' '
            if @cursor.ali == 0 and @cursor.mvi == mi
                s.push rpad 4 m.pos+'◂', ps
            else
                s.push rpad 4 m.pos, ps
            a.push m.alt
            
        to = 0
        lo = 0  
        for i in a.length-1..0
            for t in a[i]
                tw = 4
                li = 0
                tls = t.rowStrings()
                for tl in tls
                    s[i+li] ?= rpad 4
                    s[i+li]  = rpad lo, s[i+li], li == 0 ? '─' : ' '
                    s[i+li] += tl
                    
                    if li == 0 and a[i].indexOf(t) < a[i].length-1
                        rc = kstr.rcnt s[i+li], ' '
                        s[i+li] = rtrim s[i+li]
                        s[i+li] += rpad rc, '' '─'
                    
                    tw = max tw, tl.length
                    li++
                to += tw
                lo = to + 4
        s
                    
    toString: -> @rowStrings().map((l) -> rtrim l).join '\n'
    
    #  0000000   0000000   000      000   000  00     00  000   000   0000000  
    # 000       000   000  000      000   000  000   000  0000  000  000       
    # 000       000   000  000      000   000  000000000  000 0 000  0000000   
    # 000       000   000  000      000   000  000 0 000  000  0000       000  
    #  0000000   0000000   0000000   0000000   000   000  000   000  0000000   
    
    toColumns: ->
        
        columns = []
        cursor  = x:0 y:0
        
        treeToColumn = (tree, col, row) ->
            
            fillCol = -> while col >= columns.length ➜ columns.push []
            fillCol()
            
            column = null
            while not column
                column = columns[col]
                
                for mi in tree.moves.length-1..0
                    if column[mi+row]
                        column[row] = '-'
                        col++
                        fillCol()
                        column = null
                        break

            for mi in tree.moves.length-1..0
                mv = tree.moves[mi]
                column[row+mi] = mv.pos
                if tree.cursor.mvi == mi 
                    cursor.x = col+tree.cursor.ali
                    cursor.y = row+mi
                for ai in 0...mv.alt.length
                    alt = mv.alt[ai]
                    treeToColumn alt, col+ai+1, row+mi
                    
        treeToColumn @, 0 0
        
        cursor:  cursor
        columns: columns

module.exports = Tree
