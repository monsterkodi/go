###
000000000  00000000   00000000  00000000
   000     000   000  000       000     
   000     0000000    0000000   0000000 
   000     000   000  000       000     
   000     000   000  00000000  00000000
###

{ kstr, noon, post } = require 'kxk'
{ opponent } = require './util/util'
{ max } = Math

function Tree

    @: (@parent) ->
        
        post.on? 'treeReset' @resetCursor
        
        @cursor = [-1] if not @parent
        @id     = 0
        @moves  = []
                
    #  0000000   0000000    0000000    00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000   000  000   000  000   000  000       
    # 000000000  000   000  000   000  000000000  000   000   000 000   0000000   
    # 000   000  000   000  000   000  000 0 000  000   000     000     000       
    # 000   000  0000000    0000000    000   000   0000000       0      00000000  
        
    addMove: (pos, captures=[], color) ->

        log r3('add'), y4 pos if global.test

        tr = @cursorTree()
        
        mvi = @cursor[-1]

        if mvi > 0 and tr.moves[mvi].pos == '?' 
            @cursor[@cursor.length-1]--
            mvi--
            
        color ?= @nextColor()

        if pos.split(' ').length > 1 # handicap move
            pos = "#{pos.split(' ').length}H"
        
        if mvi == tr.moves.length-1
            @cursor[@cursor.length-1] = tr.moves.length
            tr.moves.push pos:pos, captures:captures, alt:[], color:color
        else
            mvi++
            @cursor[@cursor.length-1]++
            if pos != tr.moves[mvi].pos
                altmoves = tr.moves[mvi].alt.map (alt) -> alt.moves[0].pos
                if pos in altmoves
                    # log 'pos in altmoves!' @cursor, altmoves.indexOf(pos)+1
                    @cursor.push altmoves.indexOf(pos)+1
                    @cursor.push 0
                else
                    @cursor.push tr.moves[mvi].alt.length+1
                    @cursor.push 0
                    nt = new Tree tr
                    nt.moves.push pos:pos, captures:captures, alt:[], color:color
                    tr.moves[mvi].alt.push nt
                    
        post.emit? 'tree'
        
    nextColor: -> (cm = @cursorMove()) ? opponent[cm.color] : 'black'

    # 00000000   00000000  00000000   000       0000000   000   000  
    # 000   000  000       000   000  000      000   000   000 000   
    # 0000000    0000000   00000000   000      000000000    00000    
    # 000   000  000       000        000      000   000     000     
    # 000   000  00000000  000        0000000  000   000     000     
    
    replay: (moves, @id) ->
                
        for mv in moves
            @moves.push pos:mv.pos, captures:(mv.captures ? []), alt:[], color:mv.color
            
        mvi = @moves.length - (@hasNext() ? 2 : 1)
        
        if pod = window.stash.get "tree▸#{@id}"
            for mi,alt of pod
                for td in alt
                    if @moves[mi]
                        if @moves[mi].pos != td.moves[0].pos
                            @moves[mi].alt.push new Tree(@).fromPOD td
                        else
                            log 'skip alt with same move' mi, @moves[mi].pos, noon td
                    else
                        warn "no move at index #{mi}, but in pod from stash!" @moves.length, pod
        
        @cursor = [mvi]
        post.emit? 'tree'
        
    # 000   000   0000000   000   000  000   0000000    0000000   000000000  00000000  
    # 0000  000  000   000  000   000  000  000        000   000     000     000       
    # 000 0 000  000000000   000 000   000  000  0000  000000000     000     0000000   
    # 000  0000  000   000     000     000  000   000  000   000     000     000       
    # 000   000  000   000      0      000   0000000   000   000     000     00000000  
    
    navigate: (dir) ->

        log g2('nav'), b7 dir if global.test
        # log @toColors() if global.test
        
        switch dir
            'up'        ➜ @navigateUp()
            'down'      ➜ @navigateDown()
            'right'     ➜ @navigateRight()
            'left'      ➜ @navigateLeft()
            'leftmost'  ➜ @navigateLeftmost()
            'back'      ➜ @navigateBack()
            'leftup'    ➜ @navigateLeftUp()
            'rightdown' ➜ @navigateRightDown()
            'jumpleft'  ➜ @navigateJumpLeft()
            'jumpright' ➜ @navigateJumpRight()
        
        log @toColors() if global.test
        
    navigateJumpLeft: ->
        
        {cursor, columns} = @toCursorColumns()
        x = cursor.x-1
        y = cursor.y
        while x >= 0
            if valid columns[x][y]
                @select columns[x][y]
                return
            x--
        
    navigateJumpRight: ->
        
        {cursor, columns} = @toCursorColumns()
        x = cursor.x+1
        y = cursor.y
        while x < columns.length
            if valid columns[x][y]
                @select columns[x][y]
                return
            x++
        
    navigateLeftUp: ->
        
        mvi = @cursor[-1]
        ali = @cursor[-2]
        @navigateLeft()
        if @cursor[-2] == ali and mvi == @cursor[-1]
            @navigateUp()
            
    navigateRightDown: ->

        mvi = @cursor[-1]
        ali = @cursor[-2]
        @navigateRight()
        if @cursor[-2] == ali and mvi == @cursor[-1]
            @navigateDown()
        
    navigateUp: ->
        
        tr  = @cursorTree()
        mvi = @cursor[-1]
        if mvi > 0
            @cursor[@cursor.length-1]--
            @cursorChanged()
            
    navigateDown: ->

        tr  = @cursorTree()
        mvi = @cursor[-1]
        if mvi < tr.moves.length-1
            @cursor[@cursor.length-1]++
            @cursorChanged()
        
    navigateLeft: ->
        
        tr  = @cursorTree()
        mvi = @cursor[-1]
        if mvi == 0
            if tr.parent
                ali = @cursor[-2]
                if ali == 1
                    @cursor.pop()
                    @cursor.pop()
                else
                    @cursor[@cursor.length-2]--
                @cursorChanged()
                
    navigateRight: ->

        tr  = @cursorTree()
        mvi = @cursor[-1]
        if mvi == 0
            if tr.parent
                ali = @cursor[-2]
                mvi = @cursor[-3]
                if ali < tr.parent.moves[mvi].alt.length
                    @cursor[@cursor.length-2]++
                    @cursorChanged()
        else
            if tr.moves[mvi].alt.length
                @cursor.push 1
                @cursor.push 0
                @cursorChanged()
           
    navigateBack: ->
        
        @navigateLeftmost()
        @navigateUp()
            
    navigateLeftmost: ->  
        
        if @cursor.length > 1
            if @cursor[-1] == 0
                @cursor.pop()
                @cursor.pop()
                @cursorChanged()
                
    cursorChanged: -> post.emit? 'tree'
                    
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    selectGrid: (col, row) ->
        
        log 'selectGrid' col, row
        
        if col == 0
            @select row
            return
        
        ocol = col
        orow = row
            
        columns = @toColumns()
        
        hasLeft = ->
            for line in columns.lines.hlines
                if line[0][1] == line[1][1] == row
                    if line[0][0] < col and line[1][0] >= col
                        return true

        hasUp = ->
            for line in columns.lines.vlines
                if line[0][0] == line[1][0] == col
                    if line[0][1] < row and line[1][1] >= row
                        return true

        path = []
        while col > 0
            if hasLeft()
                col--
                if col >= 0 and columns.columns[col][row] != '-'
                    path.unshift 'right' col,row
            else if hasUp()
                path.unshift 'down' col,row
                row--
            else 
                log 'dafuk?'

        r = [path[2],0]
        i = 0
        dir = 'right'
        while i <= path.length-3
            if path[i] == 'right' 
                if dir == 'right'
                    r[r.length-1]++
                else
                    r.push (path[i+3] == 'down' or path[i-3] == 'down') ? 1 : 0
                    dir = 'right'
            else if path[i] == 'down'
                if dir == 'down'
                    r[r.length-1]++
                else
                    r.push 1
                    dir = 'down'
            i+=3

        r.push 0 if r.length % 2 == 0
        @select.apply @, r
    
    select: ->
        
        return if @parent
        if arguments[0] is arr
            miai = arguments[0]
        else
            miai = [].splice.call arguments, 0
        @cursor = miai 
        @cursorChanged()        
            
    canUndo: ->
        
        @cursor.length == 1 and
        @cursor[-1] == @moves.length-1
        
    undoMove: (m) ->

        @cursor = [@cursor[0]-1]
        
        u = @moves.pop()
        if u.pos != m.pos then log 'dafuk!'
        post.emit? 'tree'
        
    resetCursor: => 
    
        @cursor = [@moves.length-2]
        
    #  0000000  000   000  00000000    0000000   0000000   00000000         000000000  00000000   00000000  00000000  
    # 000       000   000  000   000  000       000   000  000   000           000     000   000  000       000       
    # 000       000   000  0000000    0000000   000   000  0000000             000     0000000    0000000   0000000   
    # 000       000   000  000   000       000  000   000  000   000           000     000   000  000       000       
    #  0000000   0000000   000   000  0000000    0000000   000   000           000     000   000  00000000  00000000  
    
    cursorTree: ->
    
        return @ if @cursor.length == 1
        miai = clone @cursor
        tr = @
        while miai.length > 1
            mvi = miai.shift()
            ali = miai.shift()
            if ct = tr.treeAt mvi, ali
                tr = ct
            else
                log 'cursorTree no tree at?' mvi, ali
                break
        tr
                        
    #  0000000  000   000  00000000    0000000   0000000   00000000         00     00   0000000   000   000  00000000  
    # 000       000   000  000   000  000       000   000  000   000        000   000  000   000  000   000  000       
    # 000       000   000  0000000    0000000   000   000  0000000          000000000  000   000   000 000   0000000   
    # 000       000   000  000   000       000  000   000  000   000        000 0 000  000   000     000     000       
    #  0000000   0000000   000   000  0000000    0000000   000   000        000   000   0000000       0      00000000  
    
    cursorMove: ->
        
        @cursorTree().moves[@cursor[-1]]
            
    # 0000000    00000000  000            0000000  000   000  00000000    0000000   0000000   00000000   
    # 000   000  000       000           000       000   000  000   000  000       000   000  000   000  
    # 000   000  0000000   000           000       000   000  0000000    0000000   000   000  0000000    
    # 000   000  000       000           000       000   000  000   000       000  000   000  000   000  
    # 0000000    00000000  0000000        0000000   0000000   000   000  0000000    0000000   000   000  
    
    deleteCursorMove: ->

        tr = @cursorTree()
        mvi = @cursor[-1]
        if mvi == 0 
            if tr.parent
                tr.parent.moves[@cursor[-3]].alt.splice @cursor[-2]-1, 1
                if @cursor[-2] > 1
                    @cursor[@cursor.length-2]--
                else
                    @cursor.pop()
                    @cursor.pop()
        else
            if tr.parent or @noNext()
                if valid tr.moves[mvi].alt
                    alts = tr.moves[mvi].alt
                    tr.moves.splice.apply tr.moves, [mvi, tr.moves.length-mvi].concat alts.shift().moves
                    tr.moves[mvi].alt = alts
                else
                    tr.moves = tr.moves.slice 0 mvi
                    @cursor[@cursor.length-1]--
                
    noNext:  -> @moves[-1].pos != '?'
    hasNext: -> @moves[-1].pos == '?'
        
    # 000   000   0000000   00000000   000   0000000   000000000  000   0000000   000   000   0000000  
    # 000   000  000   000  000   000  000  000   000     000     000  000   000  0000  000  000       
    #  000 000   000000000  0000000    000  000000000     000     000  000   000  000 0 000  0000000   
    #    000     000   000  000   000  000  000   000     000     000  000   000  000  0000       000  
    #     0      000   000  000   000  000  000   000     000     000   0000000   000   000  0000000   
    
    clearVariations: ->
        
        for mv in @moves ➜ mv.alt = []
        @cursor = [@moves.length-1]
        post.emit 'navigate' 'select'
    
    cursorVariations: ->
        
        if cm = @cursorMove()
            if cm.alt.length
                return cm.alt.map (a) -> a.moves[0]
            else
                if tr = @cursorTree()
                    if @cursor[-1] == 0
                        if tr.parent and @cursor.length > 2
                            alt = tr.parent.moves[@cursor[-3]].alt.map (t) -> t.moves[0]
                            alt.splice @cursor[-2]-1, 1
                            tm = tr.parent.moves[@cursor[-3]]
                            alt.push tm if tm.pos != 'next'
                            return alt
        []
                
    # 000000000  00000000   00000000  00000000         0000000   000000000  
    #    000     000   000  000       000             000   000     000     
    #    000     0000000    0000000   0000000         000000000     000     
    #    000     000   000  000       000             000   000     000     
    #    000     000   000  00000000  00000000        000   000     000     
    
    treeAt: (mvi, ali) ->
        
        if 0 <= mvi < @moves.length
            return @ if ali < 1
            mv = @moves[mvi]
            if 0 < ali <= mv.alt.length
                return mv.alt[ali-1]
                
        log 'no tree at' mvi, ali
        
    depth: -> @moves.length
    width: -> 
        w = 1
        for m in @moves
            for t in m.alt
                w += t.width()
        w
    
    # 000   000  000   0000000  000000000   0000000   00000000   000   000  
    # 000   000  000  000          000     000   000  000   000   000 000   
    # 000000000  000  0000000      000     000   000  0000000      00000    
    # 000   000  000       000     000     000   000  000   000     000     
    # 000   000  000  0000000      000      0000000   000   000     000     
    
    history: ->
        
        @moveHistory().map (m) -> m.pos
        
    moveHistory: ->

        h = []
        tr = @
        i = 0
        while true
            h = h.concat tr.moves[...@cursor[i]]
            if i == @cursor.length-1
                h.push tr.moves[@cursor[i]]
                break
            else
                tr = tr.moves[@cursor[i]].alt[@cursor[i+1]-1]
                i+=2
        h
        
    #  0000000  000000000  00000000   000  000   000   0000000 
    # 000          000     000   000  000  0000  000  000      
    # 0000000      000     0000000    000  000 0 000  000  0000
    #      000     000     000   000  000  000  0000  000   000
    # 0000000      000     000   000  000  000   000   0000000 
    
    rowStrings: (miai) ->

        miai ?= @cursor
        
        s = []
        a = []
        for mi in 0...@moves.length
            m = @moves[mi]
            ps = m.alt.length ? '─' : ' '
            if miai.length == 1 and miai[0] == mi
                s.push rpad 4 m.pos+'◂', ps
            else
                s.push rpad 4 m.pos, ps
            a.push m.alt

        to = 0
        lo = 0  
        for i in a.length-1..0
            for t in a[i]
                tw = 4
                li = 0
                mia = if a[i].indexOf(t)+1 == miai[1] and i == miai[0] then miai[2..] else []
                # log 'mia' miai, i, a[i].indexOf(t)+1, mia
                tls = t.rowStrings mia
                for tl in tls
                    s[i+li] ?= rpad 4
                    s[i+li]  = rpad lo, s[i+li], li == 0 ? '─' : ' '
                    s[i+li] += tl
                    
                    if li == 0 and a[i].indexOf(t) < a[i].length-1
                        rc = kstr.rcnt s[i+li], ' '
                        s[i+li] = rtrim s[i+li]
                        s[i+li] += rpad rc, '' '─'
                    
                    tw = max tw, tl.length
                    li++
                to += tw
                lo = to + 4
        s
                    
    toString: -> @rowStrings().map((l) -> rtrim l).join '\n'
    
    toColors: -> 
        
        if not global.test ➜ return @toString()
        
        s = @toString()
        s = s.replace /─/g, w2('─')
        s = s.replace /◂/g, B3 y5('◂')
    
    #  0000000   0000000   000      000   000  00     00  000   000   0000000  
    # 000       000   000  000      000   000  000   000  0000  000  000       
    # 000       000   000  000      000   000  000000000  000 0 000  0000000   
    # 000       000   000  000      000   000  000 0 000  000  0000       000  
    #  0000000   0000000   0000000   0000000   000   000  000   000  0000000   
    
    toColumns: ->
        
        columns = []
        cursor  = x:0 y:0
        hlines  = []
        vlines  = []
        
        ct = @cursorTree()
        cs = @cursor
        
        treeToColumn = (tree, col, row) ->
            
            fillCol = -> while col >= columns.length ➜ columns.push []
            fillCol()
            
            column = null
            while not column
                column = columns[col]
                
                for mi in tree.moves.length-1..0
                    if column[mi+row]
                        if not column[row] 
                            column[row] = '-'
                        col++
                        fillCol()
                        column = null
                        break

            treeCol = col
                        
            vlines.push [[col,row], [col,row+tree.moves.length-1]]
            for mi in tree.moves.length-1..0
                mv = tree.moves[mi]
                column[row+mi] = mv.pos
                if tree == ct and mi == cs[-1]
                    cursor.x = col
                    cursor.y = row+mi
                    
                lastTreeColumn = col
                    
                for ai in 0...mv.alt.length
                    alt = mv.alt[ai]
                    lastTreeColumn = treeToColumn alt, col+ai+1, row+mi
                    
                if mv.alt.length ➜ hlines.push [[col,row+mi], [lastTreeColumn,row+mi]]
                    
            treeCol
                    
        treeToColumn @, 0 0
        
        for column in columns
            for mi in 0...column.length
                column[mi] = '' if not column[mi]
        
        cursor:  cursor
        columns: columns
        lines:  
            hlines:hlines
            vlines:vlines
            
    #  0000000  000   000  00000000    0000000   0000000   00000000          0000000   0000000   000      000   000  00     00  
    # 000       000   000  000   000  000       000   000  000   000        000       000   000  000      000   000  000   000  
    # 000       000   000  0000000    0000000   000   000  0000000          000       000   000  000      000   000  000000000  
    # 000       000   000  000   000       000  000   000  000   000        000       000   000  000      000   000  000 0 000  
    #  0000000   0000000   000   000  0000000    0000000   000   000         0000000   0000000   0000000   0000000   000   000  
    
    toCursorColumns: ->
        
        columns = []
        cursor = x:0 y:0
        
        ct = @cursorTree()
        cs = @cursor
        
        treeToColumn = (tree, col, row, cur) ->
        
            fillCol = -> while col >= columns.length ➜ columns.push []
            fillCol()
            
            column = null
            while not column
                column = columns[col]
                for mi in tree.moves.length-1..0
                    if column[mi+row]
                        col++
                        fillCol()
                        column = null
                        break

            for mi in tree.moves.length-1..0
                mv = tree.moves[mi]
                cur[cur.length-1] = mi
                column[row+mi] = copy cur
                if tree == ct and mi == cs[-1] then cursor = x:col, y:row+mi
                    
                for ai in 0...mv.alt.length
                    nc = copy cur
                    nc.push ai+1
                    nc.push 0
                    treeToColumn mv.alt[ai], col+ai+1, row+mi, nc
                    
        treeToColumn @, 0 0 [0]
        
        for column in columns
            for mi in 0...column.length
                column[mi] = [] if not column[mi]
        
        cursor:  cursor
        columns: columns
            
    # 00000000    0000000   0000000    
    # 000   000  000   000  000   000  
    # 00000000   000   000  000   000  
    # 000        000   000  000   000  
    # 000         0000000   0000000    
    
    toPOD: =>

        moves = @moves.map (m) => 
            o = pos:m.pos, color:m.color
            if not m.alt? then return o
            if m.alt?.length
                o.alt = m.alt.map (a) -> a.toPOD()
            else if not m.alt?
                log 'toPOD no alt???? ----------------------- ' @
            o
        
        pod = moves:moves
        pod.cursor = @cursor if @cursor and not @parent
        pod
        
    fromPOD: (pod) ->
        
        @cursor = copy pod.cursor if not @parent
        @moves  = pod.moves.map (m) =>
            o = pos:m.pos, color:m.color, alt:[]
            if valid m.alt
                o.alt = m.alt.map (a) => new Tree(@).fromPOD(a)
            o
        @
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    variationPOD: ->
        
        pod = {}
        for mv,i in @moves
            if valid mv.alt
                pod[i] = mv.alt.map (a) -> a.toPOD()
        pod
    
    save: ->
    
        if @id
            pod = @variationPOD()
            # log "save tree▸#{@id}" noon pod
            window.stash.set "tree▸#{@id}" pod
        
    load: (pod) -> 
        @fromPOD pod
        post.emit 'tree'
            
module.exports = Tree
