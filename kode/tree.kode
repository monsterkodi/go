###
000000000  00000000   00000000  00000000
   000     000   000  000       000     
   000     0000000    0000000   0000000 
   000     000   000  000       000     
   000     000   000  00000000  00000000
###

{ kstr, post } = require 'kxk'
{ opponent } = require './util/util'
{ max } = Math

function Tree

    @: (@parent) ->
        
        @moves  = []
                
    #  0000000   0000000    0000000    00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000   000  000   000  000   000  000       
    # 000000000  000   000  000   000  000000000  000   000   000 000   0000000   
    # 000   000  000   000  000   000  000 0 000  000   000     000     000       
    # 000   000  0000000    0000000    000   000   0000000       0      00000000  
        
    addMove: (pos, captures=[], color) ->

        if tr = @cursorTree()
            tr.addMove pos, captures
        else
            log r3('add'), y4 pos if global.test
            if empty @moves
                @cursor = mvi:-1, ali:0

            if @cursor.mvi > 0 and @moves[@cursor.mvi].pos == 'next'
                @cursor.mvi--
                
            color ?= @nextColor()
            
            if @cursor.mvi == @moves.length-1
                @cursor.ali = 0
                @cursor.mvi = @moves.length
                @moves.push pos:pos, captures:captures, alt:[], color:color
                post.emit? 'tree'
            else
                @cursor.mvi++
                if pos != @moves[@cursor.mvi].pos
                    altmoves = @moves[@cursor.mvi].alt.map (alt) -> alt.moves[0].pos
                    # log pos, altmoves
                    if pos in altmoves
                        @cursor.ali = altmoves.indexOf(pos)+1
                        tr = @moves[@cursor.mvi].alt
                        tr.cursor = ali:0, mvi:0
                    else
                        @cursor.ali = @moves[@cursor.mvi].alt.length+1
                        tr = new Tree @
                        @moves[@cursor.mvi].alt.push tr
                        tr.addMove pos, captures, color
                        return
                post.emit? 'tree'
        
    nextColor: -> (cm = @cursorMove()) ? opponent[cm.color] : 'black'

    # 00000000   00000000  00000000   000       0000000   000   000  
    # 000   000  000       000   000  000      000   000   000 000   
    # 0000000    0000000   00000000   000      000000000    00000    
    # 000   000  000       000        000      000   000     000     
    # 000   000  00000000  000        0000000  000   000     000     
    
    replay: (moves) ->
        
        for mv in moves
            @moves.push pos:mv.pos, captures:(mv.captures ? []), alt:[], color:mv.color
            
        mvi = @moves.length - (@moves[-1].pos == 'next' ? 2 : 1)
        @cursor = ali:0 mvi:mvi
        post.emit? 'tree'
        
    # 000   000   0000000   000   000  000   0000000    0000000   000000000  00000000  
    # 0000  000  000   000  000   000  000  000        000   000     000     000       
    # 000 0 000  000000000   000 000   000  000  0000  000000000     000     0000000   
    # 000  0000  000   000     000     000  000   000  000   000     000     000       
    # 000   000  000   000      0      000   0000000   000   000     000     00000000  
    
    navigate: (dir) ->

        switch dir
            'up'    ➜ @navigateUp()
            'down'  ➜ @navigateDown()
            'right' ➜ @navigateRight()
            'left'  ➜ @navigateLeft()
            'back'  ➜ @navigateBack()
        
        # log 'nav' dir if not global.test
        log g2('nav'), b7 dir if global.test
        log @toColors() if global.test
        # log @toString()
        
    navigateUp: ->
        
        if tr = @cursorTree()
            tr.navigateUp()
        else 
            if @cursor.mvi > 0
                @cursor.mvi--
                @cursorChanged()
            
    navigateDown: ->
        
        if tr = @cursorTree()
            if tr.cursor.mvi < tr.moves.length-1
                tr.navigateDown()
        else if @cursor.mvi < @moves.length-1
            # if @moves[-1].pos != 'next' or @cursor.mvi < @moves.length-2
            @cursor.mvi++
            @cursorChanged()

    navigateLeft: ->
        
        if tr = @cursorTree()
            if tr.cursor
                if tr.cursor.ali > 0
                    tr.navigateLeft()
                    return
                if tr.cursor.mvi == 0 and @cursor.ali > 0
                    tr.deselect()
                else
                    return
                
        if @cursor.ali > 0
            @cursor.ali-- 
            if @cursor.ali
                @moves[@cursor.mvi].alt[@cursor.ali-1].cursor = mvi:0, ali:0
            @cursorChanged()
        
    navigateRight: ->

        canGoRight = @cursor.ali < @moves[@cursor.mvi].alt.length
        if tr = @cursorTree()
            if tr.cursor.mvi
                tr.navigateRight()
                return
            tr.deselect() if canGoRight

        if canGoRight
            @cursor.ali++ 
            @moves[@cursor.mvi].alt[@cursor.ali-1].cursor = mvi:0, ali:0
            @cursorChanged()
           
    cursorChanged: ->
        
        post.emit? 'tree'
            
    # 0000000     0000000    0000000  000   000  
    # 000   000  000   000  000       000  000   
    # 0000000    000000000  000       0000000    
    # 000   000  000   000  000       000  000   
    # 0000000    000   000   0000000  000   000  
    
    navigateBack: ->
        if tr = @cursorTree()
            tr.navigateBack()
        else
            if @parent and @cursor.mvi == 0
                delete @cursor
                @parent.navigateLeftmost()
                @parent.navigateUp()
            else
                @navigateUp()
            
    navigateLeftmost: ->  
        
        if tr = @cursorTree()
            if tr.cursor?.ali
                tr.navigateLeftmost()
            else
                @cursor.ali = 0
                    
    #  0000000  00000000  000      00000000   0000000  000000000  
    # 000       000       000      000       000          000     
    # 0000000   0000000   000      0000000   000          000     
    #      000  000       000      000       000          000     
    # 0000000   00000000  0000000  00000000   0000000     000     
    
    selectGrid: (col, row) ->
        
        if col == 0 
            @select row
            return
        
        ocol = col
        orow = row
            
        columns = @toColumns()
        
        hasLeft = ->
            for line in columns.lines.hlines
                if line[0][1] == line[1][1] == row
                    if line[0][0] < col and line[1][0] >= col
                        return true

        hasUp = ->
            for line in columns.lines.vlines
                if line[0][0] == line[1][0] == col
                    if line[0][1] < row and line[1][1] >= row
                        return true

        path = []
        while col > 0
            if hasLeft()
                col--
                if col >= 0 and columns.columns[col][row] != '-'
                    path.unshift 'right' col,row
            else if hasUp()
                path.unshift 'down' col,row
                row--
            else 
                log 'dafuk?'

        r = [path[2],0]
        i = 0
        dir = 'right'
        while i <= path.length-3
            if path[i] == 'right' 
                if dir == 'right'
                    r[r.length-1]++
                else
                    r.push (path[i+3] == 'down' or path[i-3] == 'down') ? 1 : 0
                    dir = 'right'
            else if path[i] == 'down'
                if dir == 'down'
                    r[r.length-1]++
                else
                    r.push 1
                    dir = 'down'
            i+=3

        r.push 0 if r.length % 2 == 0
        @select.apply @, r
    
    select: ->
        
        @deselect() if not @parent
        
        miai = [].splice.call arguments, 0
        
        [mvi, ali] = miai

        if ali
            if tr = @treeAt mvi, ali
                @cursor = {mvi, ali}
                tr.select.apply tr, miai[2..]
        else
            @cursor = {mvi, ali:0}
            
    deselect: ->
            
        if tr = @cursorTree()
            tr.deselect()
        delete @cursor
        
    canUndo: ->
        
        @cursor.ali == 0 and
        @cursor.mvi == @moves.length-1
        
    undoMove: (m) ->

        @cursor.mvi--
        u = @moves.pop()
        if u.pos != m.pos then log 'dafuk!'
        post?.emit 'tree'
        
    #  0000000  000   000  00000000    0000000   0000000   00000000   000000000  00000000   00000000  00000000  
    # 000       000   000  000   000  000       000   000  000   000     000     000   000  000       000       
    # 000       000   000  0000000    0000000   000   000  0000000       000     0000000    0000000   0000000   
    # 000       000   000  000   000       000  000   000  000   000     000     000   000  000       000       
    #  0000000   0000000   000   000  0000000    0000000   000   000     000     000   000  00000000  00000000  
    
    cursorTree: ->
    
        if @cursor?.ali
            tr = @moves[@cursor.mvi]?.alt[@cursor.ali-1]
            if not tr ➜ log 'ali but no cursor tree' @
            tr
        else
            if not @parent and valid @moves and @cursor.ali > 0
                log 'no cursor tree' @
                
    #  0000000  000   000  00000000    0000000   0000000   00000000   00     00   0000000   000   000  00000000  
    # 000       000   000  000   000  000       000   000  000   000  000   000  000   000  000   000  000       
    # 000       000   000  0000000    0000000   000   000  0000000    000000000  000   000   000 000   0000000   
    # 000       000   000  000   000       000  000   000  000   000  000 0 000  000   000     000     000       
    #  0000000   0000000   000   000  0000000    0000000   000   000  000   000   0000000       0      00000000  
    
    cursorMove: ->
        
        if tr = @cursorTree()
            if cm = tr.cursorMove()
                return cm
        if @cursor
            return @moves[@cursor.mvi]
            
        error 'no cursor!' @
        
    # 000   000   0000000   00000000   000   0000000   000000000  000   0000000   000   000   0000000  
    # 000   000  000   000  000   000  000  000   000     000     000  000   000  0000  000  000       
    #  000 000   000000000  0000000    000  000000000     000     000  000   000  000 0 000  0000000   
    #    000     000   000  000   000  000  000   000     000     000  000   000  000  0000       000  
    #     0      000   000  000   000  000  000   000     000     000   0000000   000   000  0000000   
    
    cursorVariations: ->
        
        if cm = @cursorMove()
            if cm.alt.length
                return cm.alt.map (a) -> a.moves[0]
            else
                if tr = @cursorTree()
                    if not tr.cursor? or tr.cursor?.mvi == 0
                        if tr.parent?
                            alt = tr.parent.moves[tr.parent.cursor.mvi].alt.map (t) -> t.moves[0]
                            alt.splice tr.parent.cursor.ali-1, 1
                            tm = tr.parent.moves[tr.parent.cursor.mvi]
                            alt.push tm if tm.pos != 'next'
                            return alt
                    else
                        return tr.cursorVariations()
        []
                
    # 000000000  00000000   00000000  00000000         0000000   000000000  
    #    000     000   000  000       000             000   000     000     
    #    000     0000000    0000000   0000000         000000000     000     
    #    000     000   000  000       000             000   000     000     
    #    000     000   000  00000000  00000000        000   000     000     
    
    treeAt: (mvi, ali) ->
        
        if 0 <= mvi < @moves.length
            return @ if ali < 1
            mv = @moves[mvi]
            if 0 < ali <= mv.alt.length
                return mv.alt[ali-1]
        
    depth: -> @moves.length
    width: -> 
        w = 1
        for m in @moves
            for t in m.alt
                w += t.width()
        w
    
    # 000   000  000   0000000  000000000   0000000   00000000   000   000  
    # 000   000  000  000          000     000   000  000   000   000 000   
    # 000000000  000  0000000      000     000   000  0000000      00000    
    # 000   000  000       000     000     000   000  000   000     000     
    # 000   000  000  0000000      000      0000000   000   000     000     
    
    history: ->
        
        if @cursor.mvi
            if tr = @cursorTree()
                h = @moves[...@cursor.mvi].map (m) -> m.pos
                h = h.concat tr.history()
            else
                h = @moves[..@cursor.mvi].map (m) -> m.pos
        else
            if @moves.length
                h = [@moves[0].pos]
            else
                h = []
        h
        
    moveHistory: ->
        
        if @cursor.mvi
            if tr = @cursorTree()
                h = @moves[...@cursor.mvi]
                h = h.concat tr.moveHistory()
            else
                h = @moves[..@cursor.mvi]
        else
            if @moves.length
                h = [@moves[0]]
            else
                h = []
        h
        
    #  0000000  000000000  00000000   000  000   000   0000000 
    # 000          000     000   000  000  0000  000  000      
    # 0000000      000     0000000    000  000 0 000  000  0000
    #      000     000     000   000  000  000  0000  000   000
    # 0000000      000     000   000  000  000   000   0000000 
    
    rowStrings: ->

        s = []
        a = []
        for mi in 0...@moves.length
            m = @moves[mi]
            ps = m.alt.length ? '─' : ' '
            if @cursor?.ali == 0 and @cursor.mvi == mi
                s.push rpad 4 m.pos+'◂', ps
            else
                s.push rpad 4 m.pos, ps
            a.push m.alt
            
        to = 0
        lo = 0  
        for i in a.length-1..0
            for t in a[i]
                tw = 4
                li = 0
                tls = t.rowStrings()
                for tl in tls
                    s[i+li] ?= rpad 4
                    s[i+li]  = rpad lo, s[i+li], li == 0 ? '─' : ' '
                    s[i+li] += tl
                    
                    if li == 0 and a[i].indexOf(t) < a[i].length-1
                        rc = kstr.rcnt s[i+li], ' '
                        s[i+li] = rtrim s[i+li]
                        s[i+li] += rpad rc, '' '─'
                    
                    tw = max tw, tl.length
                    li++
                to += tw
                lo = to + 4
        s
                    
    toString: -> @rowStrings().map((l) -> rtrim l).join '\n'
    
    toColors: -> 
        
        if not global.test ➜ return @toString()
        
        s = @toString()
        s = s.replace /─/g, w2('─')
        s = s.replace /◂/g, B3 y5('◂')
    
    #  0000000   0000000   000      000   000  00     00  000   000   0000000  
    # 000       000   000  000      000   000  000   000  0000  000  000       
    # 000       000   000  000      000   000  000000000  000 0 000  0000000   
    # 000       000   000  000      000   000  000 0 000  000  0000       000  
    #  0000000   0000000   0000000   0000000   000   000  000   000  0000000   
    
    toColumns: ->
        
        columns = []
        cursor  = x:0 y:0
        hlines  = []
        vlines  = []
        
        treeToColumn = (tree, col, row) ->
            
            fillCol = -> while col >= columns.length ➜ columns.push []
            fillCol()
            
            column = null
            while not column
                column = columns[col]
                
                for mi in tree.moves.length-1..0
                    if column[mi+row]
                        if not column[row] 
                            column[row] = '-'
                        col++
                        fillCol()
                        column = null
                        break

            treeCol = col
                        
            vlines.push [[col,row], [col,row+tree.moves.length-1]]
            for mi in tree.moves.length-1..0
                mv = tree.moves[mi]
                column[row+mi] = mv.pos
                if tree.cursor?.mvi == mi 
                    cursor.x = col+tree.cursor.ali
                    cursor.y = row+mi

                lastTreeColumn = col
                    
                for ai in 0...mv.alt.length
                    alt = mv.alt[ai]
                    lastTreeColumn = treeToColumn alt, col+ai+1, row+mi
                    
                if mv.alt.length ➜ hlines.push [[col,row+mi], [lastTreeColumn,row+mi]]
                    
            treeCol
                    
        treeToColumn @, 0 0
        
        for column in columns
            for mi in 0...column.length
                column[mi] = '' if not column[mi]
        
        cursor:  cursor
        columns: columns
        lines:  
            hlines:hlines
            vlines:vlines
            
    # 00000000    0000000   0000000    
    # 000   000  000   000  000   000  
    # 00000000   000   000  000   000  
    # 000        000   000  000   000  
    # 000         0000000   0000000    
    
    toPOD: =>

        moves = @moves.map (m) => 
            o = pos:m.pos, color:m.color
            if not m.alt? then return o
            if m.alt?.length
                o.alt = m.alt.map (a) -> a.toPOD()
            else if not m.alt?
                log 'toPOD no alt???? ----------------------- ' @
            o
        
        pod = moves:moves
        pod.cursor = @cursor if @cursor
        pod
        
    fromPOD: (pod) ->
        
        @cursor = pod.cursor
        @moves  = pod.moves.map (m) =>
            o = pos:m.pos, color:m.color, alt:[]
            if valid m.alt
                o.alt = m.alt.map (a) => new Tree(@).fromPOD(a)
            o
        @
            
    #  0000000   0000000   000   000  00000000  
    # 000       000   000  000   000  000       
    # 0000000   000000000   000 000   0000000   
    #      000  000   000     000     000       
    # 0000000   000   000      0      00000000  
    
    save: -> window.stash.set 'tree' @toPOD()
    load: (pod) -> 
        # log pod
        @fromPOD pod
        # log @toString()
        post.emit 'tree'
            
module.exports = Tree
