###
 0000000   00000000   000  0000000  
000        000   000  000  000   000
000  0000  0000000    000  000   000
000   000  000   000  000  000   000
 0000000   000   000  000  0000000  
###

{ splice, alpha, stone } = require './util'

function Grid

    @: (a=0) ->
        if a is str
            @fromString a
        else
            @size = a
            @clear()

    #  0000000  000      00000000   0000000   00000000   
    # 000       000      000       000   000  000   000  
    # 000       000      0000000   000000000  0000000    
    # 000       000      000       000   000  000   000  
    #  0000000  0000000  00000000  000   000  000   000  
    
    copy: (g) ->
        
        @size = g.size
        @rows = clone g.rows
    
    clear: (size) ->
        
        @size = size if size?
        @rows = []
        for y in 0...@size
            row = []
            for x in 0...@size
                row.push ' '
            @rows.push row
        @
    
    # 00000000    0000000   000   000   0000000   0000000   000      
    # 000   000  000   000  000 0 000  000       000   000  000      
    # 0000000    000   000  000000000  000       000   000  000      
    # 000   000  000   000  000   000  000       000   000  000      
    # 000   000   0000000   00     00   0000000   0000000   0000000  
    
    rowCol: (x,y) ->
        
        if not y?
            if 
                x is arr
                    c = x[0] 
                    r = x[1]
                x is str
                    c = alpha.indexOf x[0].toUpperCase()
                    r = @size - int x[1..]
                else
                    dbg 'dafuk'
        else
            c = x
            r = y
            
        if 0 <= c < @size and 0 <= r < @size
            [r,c]
        else
            []

    #  0000000   000000000  
    # 000   000     000     
    # 000000000     000     
    # 000   000     000     
    # 000   000     000     
    
    at: (x,y) ->
        
        [r,c] = @rowCol x,y
        if r? then @rows[r][c]
        
    #  0000000  00000000  000000000  
    # 000       000          000     
    # 0000000   0000000      000     
    #      000  000          000     
    # 0000000   00000000     000     
    
    set: (x,y,s) ->

        if not s? then [s,y] = [y, undefined]
        
        [r,c] = @rowCol x,y
        if r?
            @rows[r][c] = s
        
    # 00000000  00000000    0000000   00     00   0000000  000000000  00000000   000  000   000   0000000   
    # 000       000   000  000   000  000   000  000          000     000   000  000  0000  000  000        
    # 000000    0000000    000   000  000000000  0000000      000     0000000    000  000 0 000  000  0000  
    # 000       000   000  000   000  000 0 000       000     000     000   000  000  000  0000  000   000  
    # 000       000   000   0000000   000   000  0000000      000     000   000  000  000   000   0000000   
    
    fromString: (str) ->
        
        spl = str.split '\n'

        while trim(spl[-1]).length == 0
            spl.pop()
            
        if ltrim(spl[0])[0] == 'A'
            spl.shift()
            spl.pop()
            t = spl[-1][0] != ' ' ? 2 : 3
            spl = spl.map (s) -> s[t..]
            spl = spl.map (s) -> s[...spl.length*2]
            
        else if spl[0][0] == '┌'
            spl.shift()
            spl.pop()
            spl = spl.map (s) -> s[2..]
            spl = spl.map (s) -> s[...spl.length*2]
        
        @size = spl.length
        @clear()
            
        for y in 0...@size
            if y < spl.length
                for x in 0...@size
                    if x*2 < spl[y].length
                        c = spl[y][x*2] 
                        c = ' ' if c == '.'
                        @set x, y, c

    # 000000000   0000000    0000000  000000000  00000000   000  000   000   0000000   
    #    000     000   000  000          000     000   000  000  0000  000  000        
    #    000     000   000  0000000      000     0000000    000  000 0 000  000  0000  
    #    000     000   000       000     000     000   000  000  000  0000  000   000  
    #    000      0000000   0000000      000     000   000  000  000   000   0000000   
    
    toString: (legend) ->
        
        s = '┌─' + lpad(@size*2, '' '─') + '┐'
        for row,ri in @rows
            s += '\n│ '
            s += (row each (v) => v + ' ').join ''
            s += '│' 
            s += ' ' + (@size-ri) if legend
        s += '\n'
        s += '└─' + lpad(@size*2, '' '─') + '┘'
        if legend
            s += '\n ' + alpha[0...@size] each (v) => ' ' + v 
        s

    toAnsi: (legend) ->
        
        s = w2 '┌─' + lpad(@size*2, '' '─') + '┐'
        for row,ri in @rows
            s += '\n' + w2 '│ '
            s += (row each (v) => v + ' ').join ''
            s += w2 '│' 
            s += ' ' + w3(@size-ri) if legend
        s += '\n'
        s += w2 '└─' + lpad(@size*2, '' '─') + '┘'
        if legend
            s += '\n ' + w3 alpha[0...@size] each (v) => ' ' + v 
        s
        
    toBinarray: ->
        
        @rows.map (r) -> 
            r.map (c) -> 
                switch c 
                    stone.black ➜  1
                    stone.white ➜ -1
                                ➜  0
        
module.exports = Grid
