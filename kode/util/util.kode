###
000   000  000000000  000  000    
000   000     000     000  000    
000   000     000     000  000    
000   000     000     000  000    
 0000000      000     000  0000000
###

class Util

    @stone: 
        empty:' ' 
        black:'○' 
        white:'●' 
        B:'○' 
        b:'○' 
        W:'●' 
        w:'●'
        
    @opponent: 
        black: 'white'
        B:     'white' 
        b:     'white'
        '○':   'white'
        '●':   'black'
        white: 'black'
        W:     'black'
        w:     'black'
        
    @stoneColor: 
        black: 'black'
        B:     'black' 
        b:     'black'
        '○':   'black'
        '●':   'white'
        white: 'white'
        W:     'white'
        w:     'white'
        
    @alpha: 'ABCDEFGHJKLMNOPQRST'
    @ilpha: 'abcdefghijklmnopqrstuvwxyz'
    
    @short: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&$@#%*<>^=+-!0123456789abcdefghijklmnopqrstuvwxyz"
    
    @splice: (s, i, n, r='') -> s.slice(0,i) + r + s.slice(i+n)
    
    @sgfToAlphaNum: (sgf, size=19) ->
        
        if sgf.length == 2
            Util.alpha[Util.ilpha.indexOf(sgf[0])] + (size - Util.ilpha.indexOf(sgf[1]))
        else
            log "sgf? '#{sgf}' #{sgf.length} #{Array.isArray sgf}"
            sgf
            
    @rank: (user) ->
        
        rating_to_rank = (rating) -> Math.log(min(6000, max(100, rating)) / 525) * 23.15
        if ret = user.ratings?.overall
            r = Math.floor rating_to_rank ret.rating
            if r < -900 ➜ return '?'
            if r < 30   ➜ return Math.ceil(30 - r)+'k'
            return Math.floor(r - 29)+'d'
        0

    @rankToKyu: (rank) ->
        
        if rank < -900 ➜ return '?'
        if rank < 30   ➜ return Math.ceil(30 - rank)+'k'
        Math.floor(rank - 29)+'d'
        
    @ogsMoves: (ogs, size) ->
        moves = []
        for o in ogs
            pos = Util.ogsMove o, size
            moves.push pos:pos, color:['black''white'][moves.length%2]
        moves.push pos:'?' color:['black''white'][moves.length%2]
        moves
        
    @ogsMove: (o, size) -> 
        
        if o[0] == -1 == o[1]
            'pass'
        else
            Util.alpha[o[0]]+(size-o[1])
            
    @toOGS: (pos, size) -> 
    
        if pos == 'pass' ➜ [-1,-1]
        else
            [Util.alpha.indexOf(pos[0]), size-int(pos[1..])]
        
    @iconUrl: (icon, size) ->
        
        icon?.replace(/-[0-9]+.png$/, "-#{size}.png").replace(/s=[0-9]+/, "s=#{size}")

module.exports = Util
