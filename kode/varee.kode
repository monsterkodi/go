###
000   000   0000000   00000000   00000000  00000000
000   000  000   000  000   000  000       000     
 000 000   000000000  0000000    0000000   0000000 
   000     000   000  000   000  000       000     
    0      000   000  000   000  00000000  00000000
###

{ elem, post } = require 'kxk'
{ max } = Math

function Varee

    @: (@parent, @tree, @boardsize) ->
        
        @div = elem 'div' class:'varee' parent:@parent        
        @div.addEventListener 'mousedown'  @onMouseDown
        
        @width  = 110
        @height = 800
        @canvas = elem 'canvas' class:'treelines' parent:@div
        @ctx = @canvas.getContext '2d'
                
        @hlt = elem 'div' class:'highlts' parent:@div
        @stn = elem 'div' class:'stones'  parent:@div
        @crs = elem 'div' class:'cursor'  parent:@hlt
        
        post.on 'resize' @onResize
        post.on 'tree'   @onTree
        
        @onResize()
        
    # 000000000  00000000   00000000  00000000  
    #    000     000   000  000       000       
    #    000     0000000    0000000   0000000   
    #    000     000   000  000       000       
    #    000     000   000  00000000  00000000  
    
    onTree: =>
        
        @tree.save()
        
        @stn.innerHTML = ''
        
        {columns,cursor,lines} = @tree.toColumns()

        for column,x in columns
            for pos,y in column
                switch pos 
                    '' 
                    '-' ➜
                        ➜
                           text = (pos == 'pass' ? '●' : pos == 'next' ? '?' : pos)
                           color = ['black''white'][y%2]
                           elem class:"varii #{color}" 
                                text:text, 
                                parent:@stn, 
                                style:"left:#{25+x*50}px; top:#{25+y*50}px;"
                                col: x
                                row: y
        
        @crs.classList.remove 'black'
        @crs.classList.remove 'white'
        @crs.classList.add color = ['black''white'][cursor.y%2]
        @crs.style.left = "#{cursor.x*50+50}px"
        @crs.style.top  = "#{cursor.y*50+50}px"
        
        @crs.scrollIntoViewIfNeeded()

        @drawLines lines
        
    # 00     00   0000000   000   000   0000000  00000000  
    # 000   000  000   000  000   000  000       000       
    # 000000000  000   000  000   000  0000000   0000000   
    # 000 0 000  000   000  000   000       000  000       
    # 000   000   0000000    0000000   0000000   00000000  
    
    onMouseDown: (event) =>
        
        if event.target.classList.contains 'varii'
            @tree.selectGrid int(event.target.getAttribute 'col'), int(event.target.getAttribute 'row')
            post.emit 'navigate' 'select'
        
    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    drawLines: (lines) ->
        
        {hlines,vlines} = lines

        @canvas.width  = @width
        @canvas.height = @height
        
        mw = @width
        mh = @height

        for vl in vlines
            v00 = 100+vl[0][0]*100
            v01 = 100+vl[0][1]*100
            v10 = 100+vl[1][0]*100
            v11 = 100+vl[1][1]*100
            @ctx.beginPath()
            @ctx.strokeStyle = '#800'
            @ctx.moveTo v00-1, v01
            @ctx.lineTo v10-1, v11
            @ctx.stroke()   

            @ctx.strokeStyle = '#ff8'
            @ctx.beginPath()
            @ctx.moveTo v00+2, v01
            @ctx.lineTo v10+2, v11
            mh = max mh, 100+v11
            @ctx.stroke() 
        
        for hl in hlines
            h00 = 100+hl[0][0]*100
            h01 = 100+hl[0][1]*100
            h10 = 100+hl[1][0]*100
            h11 = 100+hl[1][1]*100
            
            @ctx.strokeStyle = '#800'
            @ctx.beginPath()
            @ctx.moveTo h00, h01-1
            @ctx.lineTo h10, h11-1
            @ctx.stroke() 
        
            @ctx.strokeStyle = '#ff8'
            @ctx.beginPath()
            @ctx.moveTo h00, h01+2
            @ctx.lineTo h10, h11+2
            mw = max mw, 10+h10
            @ctx.stroke()
                
        if mw > @width or mh > @height
            @width  = mw
            @height = mh
            @drawLines lines
        @
            
    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onResize: =>
        
        br = @parent.getBoundingClientRect()

        tb = br.height / (@boardsize+1) - 2
        w  = max 128 (br.width - br.height)/2-tb
        rb = (br.width - br.height)/2 - w
        
        if (br.width - br.height)/2 < 128
            @div.style.display = 'none'
        else
            @div.style.display = 'initial'
        
        @div.style.width  = "#{w}px"
        @div.style.top    = "#{tb}px"
        @div.style.bottom = "#{tb}px"
        @div.style.right  = "#{rb}px"
        
    remove: ->
        
        return if not @div
        post.off 'resize' @onResize
        post.off 'tree'   @onTree
        @parent.removeChild @div
        delete @div

module.exports = Varee
